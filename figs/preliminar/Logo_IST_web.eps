%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: Logo_IST_web.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: BMM%%CreationDate: 11/8/05%%BoundingBox: 0 0 458 117%%HiResBoundingBox: 0 0 457.1646 116.2422%%CropBox: 0 0 457.1646 116.2422%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2005-08-11T12:02:25+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-08-11T12:02:25+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-08-11T12:02:25+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>68</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AJHUo7K32lJB+YzZOuT3y&#xA;Hp1lqXm/TLG+iE1pPLxliJIDDiTSqkHtkMhqJZ4xcnvX/KqPy+/6s6f8jZv+a8xPFl3uV4Ue53/K&#xA;qPy+/wCrOn/I2b/mvHxZd6+FHueV/nL5Y0LQL/TYtItBapPFI0qhnbkVYAH42bL8MiebRmiBVPOs&#xA;vaX0v+UaFPy80gHeonP/AAVxIf45g5fqLm4vpDL8rbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXyPrls1rrWoWrCjQXM0RHgUkK/wzYR5OvlzKdflj/ynmjf8Zz/&#xA;AMQbI5fpLLF9QfRN75l0mGw1C5t7qC6k06CW4ngilR3AhUsQwUkjpTMMRNuYZB5Do+j6R5z8t3er&#xA;eYNZSy8wT3j/AFW6uJgqJHGqH00hZ0Xh8fbpt8jkEmJoDZxwBIWTug/zgNqIfLsFvqC6otraNA96&#xA;jK/N4+AJYoWFfpr88OHqjN0ecZe0vqT8u7ZrbyPosbChNqkn0S/vB09mzAyfUXOx/SGRZBm7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+Y/zQsGsvPmrxnpLKLhSO&#xA;hE6iT9bUzOxG4hwcoqRW/lj/AMp5o3/Gc/8AEGxy/SVxfUE40L7fn/8A5hbj/qIyMv4WyP8AEhV0&#xA;yxk/KQ6k8QN7BqjQxTVNVR40LLStN6DtjZ46Y16Ld+YGl2Gn6D5SFnEIhdaet1cUJPKaVIy77k9f&#xA;bDjNkrkFAMLjjeSRY0FXchVHiSaDLWp9eabZiy061s1NRbQxwg+0ahf4ZriXYAIjAl57qn5katYt&#xA;fGOwjuhZ6wumiGPl6jwmF5WK7n958G21PbLRjB+TUchHzTbUfPSKNJudKRb6y1G3vbjYMJCbSD1V&#xA;RfBi3wkEYBDnbIz5UhtC8weeNc0z67p/6GZH4NG/O4dQGDc4nUUZZIzxrXY1xlGIO9oEiRtSBtPO&#xA;3nE+XLPX7qDTvqd9LBFDFEJ/UBmnEZLcm47LXoclwC6QJmrRj61+Yo8wroipo/rvaverIfrXD00l&#xA;WLid68qv4ZGo1e6bldbJppPmO/utE1q9uI4luNLub23RY+XBvqhIUmprvTfBKNFkJWGOv5z88nTN&#xA;E1KGHTPq+uTW9rbo4uOaSzoSS9GpxDI3SppTJ8EbI7mvjlQPej7bzJ541G8utO02201rnS/3eo3k&#xA;rzi3adviEUKgep8K05Fu+DhiNyy4pHkm/lHzNPrMV5b31sLPV9Mm+r39up5JyIqro3dXHTIzjTKM&#xA;rY2n5heYJdO1fU47exFvp6XH+hl5PrcMkL8UFxGeOzjf4cn4YsBhxmiWS6v5gurKz0SeONGbU7y1&#xA;tZg1aKtwpLFaEbim1crEbtmZVTDbD81NZe2hnuItPmN3HeGG2tXkNxC1okjBp4iW+BvT8Rsa5acQ&#xA;axlKL/x55jj8t3GsPcaLOyw28kVtbyStJG1xNFH+/Ut8IVZDXfrg4Bdbp4zV7K5/MPUl8sa1qHo2&#xA;s17pFzDbetbs0lnMJpI1LI1VbYSGor1weHuAvibEo6TzH5t1S/1KLy3Z2f1PS5mtZLi/eQGa4jH7&#xA;xI1j6Ba0q3+0OEDmniJ5JVdfmZqZt9PjggtLHUZLyfT9US/dhDBLAoYsHUqeDV2JGSGNByMk0bXd&#xA;X17yjDqmnQwW+pXAIjjuS7QVSXg7VQByrKpK/RkDEA0WQkSLDHIfOfngaTrWqzw6Z9X0WW6tZkQX&#xA;HN5bbaq1anAsR1oaZPgjYHexE5UT3KOj+br7RfL8t3cTWOrXF5LG1paWU8kty91eNUJNzLBAOgCj&#xA;alMTCygToJ5car5/07Tr2/1O101oLezuLkC2eYskkMTSIrh6clJFDxORAiTQZXICyhI/zIafydea&#xA;pHAkOtaeIReafLWimV0XmKEMY2V6qa4fD3rovibX1VLvz9dwR3sEdqlxqZ1d9I0q2UlVcrHG/qSs&#xA;SaBfU+Ij2+eAQ+5TP70RdeYPNehWF5qXmK2sZbG3g5xtp7y8zO0iRxxFZR0cv9odPDERB2C8RAso&#xA;O+80+edDtYdW13TrL9Dll+upaPI1zbrIwUFufwPxLCvHCIxOw5oMpDc8mD/n9pJh1rT9UVaJdwGC&#xA;Qj+eFq1PzWQD6Mt052pqzje2Jflj/wAp5o3/ABnP/EGyzL9Ja8X1BNNKJA8/UNP9HlG3vdjIS/hb&#xA;I/xOtST+St3U9NaFP+RMeE/3nwQP7tV/M/8A44Xkr/tkQ/8AJuPHFzPvXLyHuSP8uNJOqeddKtio&#xA;aNJhcSg9OEH7w1+fGmSyGolhiFyD6hzBc52KsJXyLqQ1WW89eH031yPVgtXr6KQvGU+z9ur/AC98&#xA;s4xXwa+Df4tXP5e3MHmhNX0O8Sxtyl05tWXkkV3PCYhPElONCeJdT4YRk2oqYb2Eb5R8q6ppeq6n&#xA;quoy2wuNQWJXgsVeOBjEDWZ0b/dj17bdfHBOQIpMYkElDDyTqI8j6XoHrw/WrGaCWSWremRDN6hC&#xA;/DXce2PGOIlHB6QE7bRbg+b49b5p9XTT5LIx78+bzpKG6U40TxyN7Uyre0guPKnnC2OsWej3tkNM&#xA;1mea4drpJTPC1z/fBOB4N7VyfFHa2PCd6TC/8oO2l+W9PspEWLQry0uHZwVLx20bI1AoPxsWrkRP&#xA;cnvSYbDyUZ/LXmPTddv9U8t3FoItVKPeWV8svBZUFPUjaI1q3cHDxAiijhINhH+U/LU2jpe3N7ci&#xA;71bVJvrF/cKvFOVKLHGpr8CDYVwTlbKMaY7P+XWsapqM1xrV7aktaXFn9cs4minnEwojXC19P911&#xA;HHJDIByYeGSd0XbeV/OF1LpEGtXtkdN0eWK4T6qkvrzyQKVj9QyfCvieODijvSeE9VfQvI403ydP&#xA;pLJbfpa4gu4Xvo0py+sNIU5PxDkKHUH5YynZtYwoUlUfkPX5PL82jz2+jQK0VtGtzaxyLLIbeeKQ&#xA;+sxX4uSxnt9rDxi73QIGq2V9Y/L7UXttX03R5oLfRtU9CdLOTmot7mKdJHMQRWASRE6fze2Iycie&#xA;anH0HJGf4b81aTqmpXHly6s2s9UmN1Na36yn0rh/7x4zEdw/U1wcQI3TwkHZAL+WLE6Y13NFfOt7&#xA;Pf620ymk73CBSsa0b4VpsCffD4iPDZH5T0TUNEtZ9NmnSfTYZSdJNWMqQNv6UlRQ8DspqdvDITle&#xA;7OIrZKz5M1A+W/MuletF62tXl3dW71bii3LAqH+GtRTelclx7g9zHg2I70Fa+RNYk0z6ndJpenzW&#xA;whlsL/TYnEwubcgxvNzADjrX54eMWjgNI660r8wNS0+8sNRudMjt7i0uLc/Vkm5PJLC0aFi9eChm&#xA;DHiK4AYg2EkSI3Q3mj8uG1bSrIWlwtprFtBDazzDl6U8MfEtHJQVIDLyU06/gY5K9yyx2qz+Rb6S&#xA;O+mhu47fU/0u+raXcBS6pyiSP05VIFQwU8qe2AT+5eD71W78vea9esb3TfMdxYxafcwFI109ZS4n&#xA;EiPHKzSnohT7I64iQG4UxJFFC3nlXzrrVjDo2u6hZ/ogFPrc1qkourhIiCFbmeC8itWIwiURuFMS&#xA;djyVvza8vnWPJl0Y15XNgReQ06/uwfUH/Ist9NMGKVSXLG4vE/yx/wCU80b/AIzn/iDZlZfpLi4v&#xA;qD0DU7LyCvlrzdf+XL1ri7eLhfh2bipknDDiHVKgsNiKjKAZWLcgiNGkV+W3km01f8tVs9WWQW19&#xA;evexiNuDUULEp6HY+mcck6lsuOFxose/PKxg0+Ty9YW9fQtLNoIuRq3CMqi1PjQZPAbtrziqTP8A&#xA;ILy+wGoa9KuxpZ2xPfo8pH/Cj78GeXRlgj1exZjOQ7FUt0Vmb6/yJPG8lAr2Hw0GSkgJXpur38On&#xA;gRQpNFbW31qaWSQqSrSS/CtFapIj2PTJEC2IKLt9ZgiubgvH6dq0kpM/Jmq8cSSbg/ZrHUin8uAx&#xA;Ta238w3ssqqbFuKtGk4USsymQKxpxjKfAr/EC3y7VTELxOXXNUaw+vfVIxbvVVId2ZKOVLuqofh2&#xA;rt/tPCLpbLUWsMbmRYIY5Lu4aFEZZWMLFomk5ciuyqqHou+PCtob9M3mnwXssqQtN9ZkLxeo5rwi&#xA;jJEYCEnY9TQLh4bRdK2s6ld3NhdG1jVbaFo0llZyshZuD/CoBGwcdTvjEUUkoq01ue4vAi2rfVWl&#xA;eJZQstR6ZYc2JjEfElafaqP1RMVBUZ9D0s6zbxmH4JYLiR15vQsrwgH7XbmcPEaWt1P9I89SRzbS&#xA;mzs5JLdColKqUqrTNSPgQOPH7e3XDWy2rvrGqrbW919UhKXjRrbx+q3MeqKjmeFPu/HBwhbKnca1&#xA;6Ewe7twLi1W4D8HYrVFjccdhXmHX7Q2xEVtWvtV1SxtTLcRWyuxPpoJZGJoK8QBHVm9+nfERBUko&#xA;qXVAmkx6gIy3qpEyRVp8UxUKpbtu43yNb0m9kum1PULO8mM8CNcSrbxQxxNI6fEZ25Gic9gprRe3&#xA;3SoFFphBeTXOmzSywtBKokUqwZa8QaMvMI1D7jBW6b2UreQLoOnu6+pVbMbkjdnjANR4E198eq9E&#xA;uu9WvrgxKI445or2JVtzI6yDdgBICn2W68lqMkAGNo39NXhm+oCCI6kJDGRzb0QBGsnPlx5ftgca&#xA;fTg4evRNqN75lmt7T1RDH68Uksc9uXcsTDQt6fFDUFTXkaAd8RBTJPsgydirsVcQGBVhUHYg9CMV&#xA;eC2flaTy3+cen2QUizlnM9i3YwurUHzU1U/LMsy4oOKI8M3pDflF5EfUZL5rFj6jF2tvVcQ8ia1C&#xA;gg0r+zWntlHiypv8ONswiijijSKJBHFGAqIoAVVAoAANgAMrZvHPzzsbm/8AMOgWNqhkublHjiQd&#xA;2aRQMycBoFx84sh6l5a0K20LQ7PSrfdLaMKz9Obnd3P+sxJyiUrNt0Y0KTPIsnYqgLrQ9PuZ3mcS&#xA;I8oAm9KR4xIBsOYQgHJCRRSqdNsykqBOKTQLbMqmg9JOQVR4U9Q4LWlN9F054HgeLlE8qzMpJ+2o&#xA;UA/ctMPEVpdLpNnLcm4YOJGKtIEkdFcpTiXVSFalO+DiK03+i7UWaWiGSOKMkoY5HRgSSftKQf2s&#xA;bWlJdB0tY2jSIqp4EFXcMpiBCsrA8gwr1rh4itLD5c0woykSkvz9R/Wk5OJAocM3KrA8BsceIrwr&#xA;pPL+mSChWQAhQ4WWQB+FAvMcviIp3x4ivCrJpNml0bhA6uWMnASP6fNq1f068amvhg4itK7W8bXC&#xA;XBH72NHjU9uMhUtt84xgtKH/AERY/WTcBXVy/qsiySCMyD9sxhuNdvDDxFFLI9DsIzHx9ThEyvFE&#xA;ZZGRCnTipYgYeIrSpLpVlLM8skfJpA4cEmhEiLGwp7rGMFrSi2g2DBQ5nbhXgWnmJCsKFQeVeJGH&#xA;iK8KIXTbNbAWBQvaheHB2Zjx/wBYmvy8MF72tKI0PT+LhhK5fgebyyM4MZYoVctyWnI9Dh4itIiC&#xA;yght2gTkUevMu7OxLChJZiTgtaQsGhWkIjUS3DRxFCkTzOyD02DL8JNNiow8S05tA05ixYSs5KlJ&#xA;GmlLpwqV4MWqtCa48RWlw0LTlgEQVwQ5l9YSP6vqEUL+pXlUj3x4itLZfL+lyRiPg6qFdCVkkVmW&#xA;Q8mDsGq1W33x4ivCEfGgjjWNalUAUFiWNAKbk1JyKV2KuxV2KsW/MDyxcaxpsN5px9PXNJf61psv&#xA;cstC0X+z4j6aZZjlR35MJxsbc0d5Q8z2vmPRo76Iencp+6vbY7NDOv20IO/uPbIzjRTGVhNb29tL&#xA;G0mvLuVYbaBTJNK3RVXcnABbIlg3kmzuvMeuz+eNSiMcTA2+g2zdY7cVBlp/M9T957Uy2ZocIaoC&#xA;zxFn+UtrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irAfNGl6l5Y1mXzjoURmtpQP8QaYuwkjXczoP516n7+nLLYkSHCWqQ4TxBBNdz/mVqUcFskkHkux&#xA;dZLuVwUe8mAqIh4Kvenz68aH6B/SR9f9V6THHHFGsUShI0AVEUAKqgUAAHQDKW5dirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirjSh5dO9elMVQWj/o&#xA;f9Hx/of0P0f8XpfVuPpV5Hlx4bfarXCbvdArojcCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:CB329D2B0BF011DA9CC48B13927A38D3</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CB329D2C0BF011DA9CC48B13927A38D3</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:CB329D2A0BF011DA9CC48B13927A38D3</stRef:instanceID>
            <stRef:documentID>uuid:CB329D290BF011DA9CC48B13927A38D3</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -116.242 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 116.242 li457.165 116.242 li457.165 0 licpclp[1 0 0 1 0 0 ] concat1.68555 1.64648 mo1.68555 1.64648 2.42432 33.0107 8.74072 51.6729 cv19.0229 82.0518 27.4907 96.1553 44.5864 113.871 cv61.6821 96.1553 70.1509 82.0518 80.4321 51.6729 cv86.7485 33.0107 87.479 1.64648 87.479 1.64648 cv1.68555 1.64648 li1.68555 1.64648 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 0 cmykf25.1558 89.2891 mo25.1558 1.64648 li1.68555 1.64648 li1.68555 1.64648 2.42432 33.0107 8.74072 51.6729 cv14.2026 67.8105 19.1528 79.3555 25.1558 89.2891 cv25.1558 89.2891 licp0.6863 0.4471 0.3098 0.1686 cmykf64.0083 89.2891 mo64.0083 1.64648 li87.479 1.64648 li87.479 1.64648 86.7388 33.0107 80.4224 51.6729 cv74.9614 67.8105 70.0103 79.3555 64.0083 89.2891 cv64.0083 89.2891 licpf1.20557 19.8184 mo0.225098 9.57764 0 0 0 0 cv89.1626 0 li89.1626 0 88.9419 9.57715 87.9634 19.8184 cv84.3345 57.8018 71.6802 88.167 44.5864 116.242 cv17.4907 88.1631 4.84229 57.7939 1.20557 19.8184 cv1.20557 19.8184 licp10.3003 51.145 mo20.2788 80.626 28.479 94.5527 44.5864 111.491 cv73.9966 80.5654 84.2095 44.709 85.7778 3.29297 cv64.0063 3.29297 li64.0044 2.87891 li25.1382 2.88086 li25.1353 3.29297 li3.38721 3.29297 li3.64355 10.0137 4.93896 35.3037 10.3003 51.145 cv10.3003 51.145 licpf47.5435 44.8994 mo47.5435 44.8994 47.5435 57.5093 47.5435 58.1953 cv47.5435 62.4141 47.0376 68.5049 43.2397 72.3027 cv40.1514 75.3916 31.4302 77.3579 29.688 72.0225 cv29.0845 70.1729 30.4609 68.3286 32.1567 68.3262 cv34.437 68.3232 35.1294 69.999 35.689 70.9893 cv37.1772 73.6211 41.0103 73.1191 41.0103 68.042 cv41.0103 67.1982 41.0103 62.0747 41.0103 62.0747 cv41.0103 44.8994 li47.5435 44.8994 li47.5435 44.8994 licp0 0 0 1 cmykf30.2388 27.5225 mo36.3003 27.5225 li36.3003 61.3794 li30.2388 61.3794 li30.2388 27.5225 li30.2388 27.5225 licp0.6863 0.4471 0.3098 0.1686 cmykf52.7056 27.5547 mo58.7661 27.5547 li61.7935 27.5547 li61.7935 31.6719 li58.7661 31.6719 li58.7661 61.3794 li52.7056 61.3794 li52.7056 31.6719 li49.7915 31.6719 li49.7915 27.5547 li52.7056 27.5547 li52.7056 27.5547 licpf47.5435 44.8994 mo47.5435 44.8994 47.5435 57.5093 47.5435 58.1953 cv47.5435 62.4141 47.0376 68.5049 43.2397 72.3027 cv40.1514 75.3916 31.4302 77.3579 29.688 72.0225 cv29.0845 70.1729 30.4609 68.3286 32.1567 68.3262 cv34.437 68.3232 35.1294 69.999 35.689 70.9893 cv37.1772 73.6211 41.0103 73.1191 41.0103 68.042 cv41.0103 67.1982 41.0103 62.0747 41.0103 62.0747 cv41.0103 44.8994 li47.5435 44.8994 li47.5435 44.8994 licpf41.0083 44.8994 mo41.0083 44.8994 41.0083 32.29 41.0083 31.6035 cv41.0083 27.3848 41.5142 21.2939 45.312 17.4961 cv48.4009 14.4072 57.1216 12.4414 58.8638 17.7769 cv59.4673 19.626 58.0903 21.4697 56.395 21.4727 cv54.1157 21.4756 53.4224 19.7998 52.8618 18.8096 cv51.3735 16.1777 47.5415 16.6797 47.5415 21.7568 cv47.5415 22.6006 47.5415 27.7246 47.5415 27.7246 cv47.5415 44.8994 li41.0083 44.8994 li41.0083 44.8994 licpf117.372 34.6753 mo119.715 34.6753 li119.715 51.0503 li117.372 51.0503 li117.372 34.6753 licpf136.34 34.6753 mo138.575 34.6753 li138.575 51.0503 li136.551 51.0503 li125.622 38.4429 li125.622 51.0503 li123.418 51.0503 li123.418 34.6753 li125.317 34.6753 li136.34 47.3916 li136.34 34.6753 licpf146.141 44.1929 mo144.36 43.1108 li143.243 42.4287 142.448 41.7573 141.975 41.0972 cv141.502 40.4375 141.266 39.6782 141.266 38.8188 cv141.266 37.5298 141.713 36.4834 142.608 35.6792 cv143.503 34.8745 144.666 34.4722 146.096 34.4722 cv147.464 34.4722 148.719 34.8589 149.86 35.6323 cv149.86 38.2886 li148.679 37.1509 147.409 36.5815 146.049 36.5815 cv145.283 36.5815 144.654 36.7583 144.161 37.1108 cv143.668 37.4644 143.422 37.916 143.422 38.4668 cv143.422 38.9556 143.604 39.4136 143.969 39.8403 cv144.334 40.2671 144.917 40.7163 145.72 41.188 cv147.508 42.2505 li149.503 43.4468 150.5 44.9663 150.5 46.8091 cv150.5 48.1216 150.061 49.188 149.183 50.0078 cv148.305 50.8276 147.164 51.2378 145.758 51.2378 cv144.143 51.2378 142.671 50.7417 141.344 49.7495 cv141.344 46.7651 li142.608 48.3721 144.072 49.1753 145.734 49.1753 cv146.467 49.1753 147.078 48.9712 147.566 48.563 cv148.053 48.1543 148.297 47.6431 148.297 47.0278 cv148.297 46.0322 147.579 45.0874 146.141 44.1929 cvcpf151.68 34.6753 mo165.352 34.6753 li165.352 36.769 li159.649 36.769 li159.649 51.0503 li157.29 51.0503 li157.29 36.769 li151.68 36.769 li151.68 34.6753 licpf167.598 34.6753 mo169.942 34.6753 li169.942 51.0503 li167.598 51.0503 li167.598 34.6753 licpf172.176 34.6753 mo185.848 34.6753 li185.848 36.769 li180.145 36.769 li180.145 51.0503 li177.786 51.0503 li177.786 36.769 li172.176 36.769 li172.176 34.6753 licpf199.469 34.6753 mo201.829 34.6753 li201.829 43.9702 li201.829 45.229 201.737 46.1782 201.553 46.8188 cv201.37 47.4595 201.143 47.9932 200.873 48.4189 cv200.603 48.8447 200.273 49.2256 199.882 49.5615 cv198.584 50.6792 196.888 51.2378 194.793 51.2378 cv192.66 51.2378 190.948 50.6831 189.658 49.5732 cv189.267 49.2295 188.937 48.8447 188.667 48.4189 cv188.397 47.9932 188.174 47.4712 187.999 46.854 cv187.823 46.2368 187.735 45.2681 187.735 43.9468 cv187.735 34.6753 li190.094 34.6753 li190.094 43.9707 li190.094 45.5103 190.27 46.5811 190.622 47.1826 cv190.973 47.7847 191.508 48.2671 192.227 48.6304 cv192.946 48.9937 193.793 49.1753 194.77 49.1753 cv196.161 49.1753 197.293 48.812 198.168 48.0854 cv198.629 47.6948 198.961 47.2334 199.165 46.7017 cv199.368 46.1704 199.469 45.2603 199.469 43.9707 cv199.469 34.6753 licpf203.665 34.6753 mo217.336 34.6753 li217.336 36.769 li211.633 36.769 li211.633 51.0503 li209.274 51.0503 li209.274 36.769 li203.665 36.769 li203.665 34.6753 licpf226.125 36.6753 mo224.251 36.6753 222.711 37.2612 221.505 38.4326 cv220.299 39.604 219.696 41.0996 219.696 42.9194 cv219.696 44.6846 220.301 46.1528 221.511 47.3247 cv222.721 48.4956 224.236 49.0815 226.055 49.0815 cv227.882 49.0815 229.407 48.4839 230.628 47.2896 cv231.85 46.0942 232.461 44.6064 232.461 42.8257 cv232.461 41.0918 231.85 39.6333 230.628 38.4502 cv229.407 37.2671 227.906 36.6753 226.125 36.6753 cvcp226.038 34.4409 mo228.569 34.4409 230.675 35.2417 232.358 36.8442 cv234.042 38.4458 234.883 40.4541 234.883 42.8687 cv234.883 45.2832 234.034 47.2817 232.334 48.8643 cv230.636 50.4468 228.495 51.2378 225.909 51.2378 cv223.44 51.2378 221.384 50.4468 219.74 48.8643 cv218.096 47.2817 217.274 45.2988 217.274 42.9155 cv217.274 40.4697 218.102 38.4458 219.757 36.8442 cv221.414 35.2417 223.507 34.4409 226.038 34.4409 cvcpf248.481 44.1929 mo246.7 43.1108 li245.583 42.4287 244.788 41.7573 244.315 41.0972 cv243.842 40.4375 243.606 39.6782 243.606 38.8188 cv243.606 37.5298 244.053 36.4834 244.948 35.6792 cv245.843 34.8745 247.006 34.4722 248.436 34.4722 cv249.804 34.4722 251.059 34.8589 252.2 35.6323 cv252.2 38.2886 li251.019 37.1509 249.749 36.5815 248.389 36.5815 cv247.623 36.5815 246.994 36.7583 246.5 37.1108 cv246.008 37.4644 245.762 37.916 245.762 38.4668 cv245.762 38.9556 245.944 39.4136 246.309 39.8403 cv246.674 40.2671 247.257 40.7163 248.06 41.188 cv249.848 42.2505 li251.843 43.4468 252.84 44.9663 252.84 46.8091 cv252.84 48.1216 252.401 49.188 251.523 50.0078 cv250.645 50.8276 249.503 51.2378 248.098 51.2378 cv246.483 51.2378 245.011 50.7417 243.684 49.7495 cv243.684 46.7651 li244.948 48.3721 246.412 49.1753 248.074 49.1753 cv248.807 49.1753 249.417 48.9712 249.906 48.563 cv250.393 48.1543 250.637 47.6431 250.637 47.0278 cv250.637 46.0322 249.918 45.0874 248.481 44.1929 cvcpf266.817 34.6753 mo269.176 34.6753 li269.176 43.9702 li269.176 45.229 269.084 46.1782 268.901 46.8188 cv268.717 47.4595 268.491 47.9932 268.221 48.4189 cv267.951 48.8447 267.621 49.2256 267.23 49.5615 cv265.932 50.6792 264.236 51.2378 262.141 51.2378 cv260.007 51.2378 258.295 50.6831 257.005 49.5732 cv256.615 49.2295 256.284 48.8447 256.014 48.4189 cv255.745 47.9932 255.522 47.4712 255.346 46.854 cv255.17 46.2368 255.083 45.2681 255.083 43.9468 cv255.083 34.6753 li257.442 34.6753 li257.442 43.9707 li257.442 45.5103 257.618 46.5811 257.969 47.1826 cv258.321 47.7847 258.856 48.2671 259.575 48.6304 cv260.293 48.9937 261.141 49.1753 262.118 49.1753 cv263.508 49.1753 264.641 48.812 265.516 48.0854 cv265.977 47.6948 266.309 47.2334 266.512 46.7017 cv266.715 46.1704 266.817 45.2603 266.817 43.9707 cv266.817 34.6753 licpf277.065 36.769 mo274.637 36.769 li274.637 41.8628 li277.206 41.8628 li278.159 41.8628 278.894 41.6392 279.411 41.1929 cv279.926 40.7456 280.184 40.1069 280.184 39.2749 cv280.184 37.6045 279.144 36.769 277.065 36.769 cvcp272.278 51.0503 mo272.278 34.6753 li277.471 34.6753 li279.034 34.6753 280.281 35.0967 281.211 35.9395 cv282.141 36.7822 282.606 37.9136 282.606 39.3335 cv282.606 40.2856 282.368 41.1284 281.891 41.8618 cv281.415 42.5952 280.762 43.1274 279.934 43.4595 cv279.106 43.7905 277.918 43.9565 276.372 43.9565 cv274.637 43.9565 li274.637 51.0503 li272.278 51.0503 licpf284.653 34.6753 mo293.934 34.6753 li293.934 36.769 li286.997 36.769 li286.997 41.7534 li293.7 41.7534 li293.7 43.8472 li286.997 43.8472 li286.997 48.9253 li294.153 48.9253 li294.153 51.019 li284.653 51.019 li284.653 34.6753 licpf299.762 36.6753 mo299.059 36.6753 li299.059 41.8315 li299.95 41.8315 li301.137 41.8315 301.952 41.73 302.393 41.5278 cv302.834 41.3247 303.178 41.019 303.424 40.6099 cv303.67 40.2007 303.793 39.7349 303.793 39.2124 cv303.793 38.6982 303.657 38.2324 303.383 37.8154 cv303.11 37.3984 302.725 37.104 302.229 36.9326 cv301.733 36.7612 300.911 36.6753 299.762 36.6753 cvcp296.715 51.0503 mo296.715 34.6753 li300.815 34.6753 li302.471 34.6753 303.785 35.0854 304.756 35.9058 cv305.729 36.7266 306.215 37.8364 306.215 39.2349 cv306.215 40.188 305.977 41.0122 305.501 41.7075 cv305.026 42.4033 304.342 42.9229 303.454 43.2666 cv303.978 43.6108 304.491 44.0801 304.991 44.6743 cv305.493 45.269 306.196 46.3042 307.102 47.7808 cv307.672 48.7104 308.129 49.4097 308.473 49.8784 cv309.34 51.0503 li306.551 51.0503 li305.837 49.9712 li305.814 49.9321 305.767 49.8657 305.697 49.772 cv305.241 49.1274 li304.515 47.9312 li303.731 46.6528 li303.247 45.981 302.803 45.4458 302.4 45.0483 cv301.997 44.6509 301.633 44.3638 301.308 44.1885 cv300.983 44.0132 300.437 43.9253 299.669 43.9253 cv299.059 43.9253 li299.059 51.0503 li296.715 51.0503 licpf311.165 34.6753 mo313.508 34.6753 li313.508 51.0503 li311.165 51.0503 li311.165 34.6753 licpf325.266 36.6753 mo323.392 36.6753 321.852 37.2612 320.646 38.4326 cv319.44 39.604 318.836 41.0996 318.836 42.9194 cv318.836 44.6846 319.442 46.1528 320.652 47.3247 cv321.862 48.4956 323.376 49.0815 325.196 49.0815 cv327.023 49.0815 328.547 48.4839 329.769 47.2896 cv330.991 46.0942 331.602 44.6064 331.602 42.8257 cv331.602 41.0918 330.991 39.6333 329.769 38.4502 cv328.547 37.2671 327.046 36.6753 325.266 36.6753 cvcp325.178 34.4409 mo327.709 34.4409 329.816 35.2417 331.499 36.8442 cv333.182 38.4458 334.024 40.4541 334.024 42.8687 cv334.024 45.2832 333.174 47.2817 331.475 48.8643 cv329.777 50.4468 327.635 51.2378 325.049 51.2378 cv322.581 51.2378 320.525 50.4468 318.881 48.8643 cv317.237 47.2817 316.415 45.2988 316.415 42.9155 cv316.415 40.4697 317.243 38.4458 318.898 36.8442 cv320.554 35.2417 322.647 34.4409 325.178 34.4409 cvcpf340.016 36.6753 mo339.313 36.6753 li339.313 41.8315 li340.204 41.8315 li341.391 41.8315 342.206 41.73 342.647 41.5278 cv343.088 41.3247 343.432 41.019 343.678 40.6099 cv343.924 40.2007 344.047 39.7349 344.047 39.2124 cv344.047 38.6982 343.911 38.2324 343.637 37.8154 cv343.364 37.3984 342.979 37.104 342.483 36.9326 cv341.987 36.7612 341.165 36.6753 340.016 36.6753 cvcp336.969 51.0503 mo336.969 34.6753 li341.069 34.6753 li342.725 34.6753 344.039 35.0854 345.01 35.9058 cv345.983 36.7266 346.469 37.8364 346.469 39.2349 cv346.469 40.188 346.231 41.0122 345.755 41.7075 cv345.28 42.4033 344.596 42.9229 343.708 43.2666 cv344.232 43.6108 344.745 44.0801 345.245 44.6743 cv345.747 45.269 346.45 46.3042 347.356 47.7808 cv347.926 48.7104 348.383 49.4097 348.727 49.8784 cv349.594 51.0503 li346.805 51.0503 li346.091 49.9712 li346.068 49.9321 346.021 49.8657 345.951 49.772 cv345.495 49.1274 li344.769 47.9312 li343.985 46.6528 li343.5 45.981 343.057 45.4458 342.654 45.0483 cv342.25 44.6509 341.887 44.3638 341.562 44.1885 cv341.237 44.0132 340.691 43.9253 339.923 43.9253 cv339.313 43.9253 li339.313 51.0503 li336.969 51.0503 licpf353.665 34.6753 mo367.336 34.6753 li367.336 36.769 li361.633 36.769 li361.633 51.0503 li359.274 51.0503 li359.274 36.769 li353.665 36.769 li353.665 34.6753 licpf376.379 29.9565 mo373.723 33.4722 li372.411 33.4722 li373.989 29.9565 li376.379 29.9565 licp369.567 34.6753 mo378.848 34.6753 li378.848 36.769 li371.911 36.769 li371.911 41.7534 li378.614 41.7534 li378.614 43.8472 li371.911 43.8472 li371.911 48.9253 li379.067 48.9253 li379.067 51.019 li369.567 51.019 li369.567 34.6753 licpf395.676 47.2534 mo395.676 49.8315 li393.957 50.769 391.971 51.2378 389.72 51.2378 cv387.891 51.2378 386.339 50.8706 385.065 50.1362 cv383.792 49.4023 382.783 48.3911 382.04 47.1021 cv381.297 45.8135 380.926 44.4194 380.926 42.9194 cv380.926 40.5371 381.776 38.5337 383.477 36.9092 cv385.178 35.2847 387.275 34.4722 389.769 34.4722 cv391.49 34.4722 393.401 34.9253 395.504 35.8315 cv395.504 38.3472 li393.588 37.2534 391.714 36.7065 389.883 36.7065 cv388.006 36.7065 386.448 37.2979 385.208 38.48 cv383.968 39.6626 383.348 41.144 383.348 42.9233 cv383.348 44.7183 383.958 46.1938 385.178 47.3491 cv386.398 48.5044 387.958 49.0815 389.858 49.0815 cv391.844 49.0815 393.784 48.4722 395.676 47.2534 cvcpf411.543 34.6753 mo413.778 34.6753 li413.778 51.0503 li411.754 51.0503 li400.825 38.4429 li400.825 51.0503 li398.622 51.0503 li398.622 34.6753 li400.52 34.6753 li411.543 47.3916 li411.543 34.6753 licpf417.313 34.6753 mo419.657 34.6753 li419.657 51.0503 li417.313 51.0503 li417.313 34.6753 licpf437.407 47.2534 mo437.407 49.8315 li435.687 50.769 433.702 51.2378 431.451 51.2378 cv429.622 51.2378 428.07 50.8706 426.795 50.1362 cv425.522 49.4023 424.513 48.3911 423.77 47.1021 cv423.028 45.8135 422.657 44.4194 422.657 42.9194 cv422.657 40.5371 423.506 38.5337 425.208 36.9092 cv426.909 35.2847 429.005 34.4722 431.5 34.4722 cv433.22 34.4722 435.131 34.9253 437.235 35.8315 cv437.235 38.3472 li435.319 37.2534 433.445 36.7065 431.614 36.7065 cv429.737 36.7065 428.178 37.2979 426.938 38.48 cv425.699 39.6626 425.079 41.144 425.079 42.9233 cv425.079 44.7183 425.688 46.1938 426.909 47.3491 cv428.128 48.5044 429.688 49.0815 431.588 49.0815 cv433.575 49.0815 435.514 48.4722 437.407 47.2534 cvcpf448.407 36.6753 mo446.533 36.6753 444.993 37.2612 443.787 38.4326 cv442.581 39.604 441.977 41.0996 441.977 42.9194 cv441.977 44.6846 442.583 46.1528 443.792 47.3247 cv445.002 48.4956 446.517 49.0815 448.336 49.0815 cv450.164 49.0815 451.688 48.4839 452.91 47.2896 cv454.131 46.0942 454.743 44.6064 454.743 42.8257 cv454.743 41.0918 454.131 39.6333 452.91 38.4502 cv451.688 37.2671 450.187 36.6753 448.407 36.6753 cvcp448.319 34.4409 mo450.85 34.4409 452.957 35.2417 454.639 36.8442 cv456.323 38.4458 457.165 40.4541 457.165 42.8687 cv457.165 45.2832 456.315 47.2817 454.616 48.8643 cv452.917 50.4468 450.776 51.2378 448.19 51.2378 cv445.721 51.2378 443.666 50.4468 442.022 48.8643 cv440.377 47.2817 439.555 45.2988 439.555 42.9155 cv439.555 40.4697 440.383 38.4458 442.039 36.8442 cv443.695 35.2417 445.788 34.4409 448.319 34.4409 cvcpf129.793 58.3315 mo131.09 58.3315 li131.09 67.4614 li131.09 69.9614 130.44 71.8901 129.14 73.248 cv127.84 74.606 126.158 75.2847 124.092 75.2847 cv122.035 75.2847 120.356 74.6138 119.056 73.272 cv117.756 71.9302 117.106 70.0933 117.106 67.7603 cv117.106 58.3315 li118.403 58.3315 li118.403 67.7095 li118.403 69.7056 118.931 71.2671 119.988 72.3931 cv121.045 73.519 122.411 74.0815 124.086 74.0815 cv125.777 74.0815 127.151 73.5127 128.208 72.3745 cv129.265 71.2368 129.793 69.6221 129.793 67.5298 cv129.793 58.3315 licp0.3608 0.2157 0.1373 0.0314 cmykf135.338 64.0503 mo135.338 65.9531 li135.386 65.9531 li136.303 64.5283 137.511 63.8159 139.011 63.8159 cv140.255 63.8159 141.249 64.2153 141.991 65.0137 cv142.732 65.812 143.104 66.9185 143.104 68.3315 cv143.104 75.0503 li141.932 75.0503 li141.932 68.7783 li141.932 66.2407 140.934 64.9722 138.94 64.9722 cv137.48 64.9722 136.279 65.7578 135.338 67.3286 cv135.338 75.0503 li134.166 75.0503 li134.166 64.0503 li135.338 64.0503 licpf147.552 64.0503 mo147.552 75.0503 li146.364 75.0503 li146.364 64.0503 li147.552 64.0503 licp147.552 58.3315 mo147.552 60.3472 li146.364 60.3472 li146.364 58.3315 li147.552 58.3315 licpf159.72 64.0503 mo154.992 75.2847 li154.283 75.2847 li149.267 64.0503 li150.458 64.0503 li154.603 73.3345 li158.561 64.0503 li159.72 64.0503 licpf161.731 68.1909 mo168.852 68.1909 li168.438 66.0454 167.279 64.9722 165.375 64.9722 cv164.475 64.9722 163.696 65.2534 163.039 65.8159 cv162.382 66.3784 161.946 67.1699 161.731 68.1909 cvcp170.243 69.1284 mo161.576 69.1284 li161.551 69.3208 161.54 69.5132 161.54 69.7056 cv161.54 70.9395 161.978 71.9849 162.855 72.8423 cv163.732 73.6997 164.769 74.1284 165.965 74.1284 cv167.36 74.1284 168.724 73.5815 170.055 72.4878 cv170.055 73.8203 li168.796 74.7964 167.385 75.2847 165.824 75.2847 cv164.238 75.2847 162.926 74.7329 161.89 73.6294 cv160.854 72.5259 160.336 71.1216 160.336 69.4185 cv160.336 67.8032 160.814 66.4653 161.77 65.4058 cv162.726 64.3462 163.929 63.8159 165.379 63.8159 cv166.742 63.8159 167.893 64.2925 168.833 65.2456 cv169.772 66.1987 170.243 67.4932 170.243 69.1284 cvcpf180.212 65.1274 mo179.533 66.2222 li178.618 65.3892 177.882 64.9722 177.326 64.9722 cv176.228 64.9722 175.055 66.0259 173.806 68.1323 cv173.806 75.0503 li172.634 75.0503 li172.634 64.0503 li173.806 64.0503 li173.806 66.9453 li173.854 66.9453 li175.166 64.8589 176.447 63.8159 177.695 63.8159 cv178.411 63.8159 179.25 64.2534 180.212 65.1274 cvcpf187.805 64.7534 mo187.805 66.019 li186.688 65.269 185.682 64.894 184.789 64.894 cv184.126 64.894 183.567 65.0737 183.113 65.4321 cv182.658 65.7915 182.43 66.2339 182.43 66.7603 cv182.43 67.1353 182.568 67.48 182.845 67.7949 cv183.122 68.1099 183.883 68.5093 185.13 68.9927 cv186.376 69.4766 187.192 69.978 187.575 70.498 cv187.958 71.0181 188.149 71.5981 188.149 72.2378 cv188.149 73.0933 187.801 73.8149 187.107 74.4028 cv186.413 74.9907 185.554 75.2847 184.532 75.2847 cv183.422 75.2847 182.321 74.9517 181.227 74.2847 cv181.227 73.1284 li182.528 73.7954 183.681 74.1284 184.686 74.1284 cv185.365 74.1284 185.921 73.9487 186.356 73.5894 cv186.791 73.23 187.008 72.77 187.008 72.2109 cv187.008 71.8276 186.868 71.4741 186.585 71.1504 cv186.304 70.8267 185.539 70.4175 184.291 69.9219 cv183.042 69.4263 182.232 68.9365 181.862 68.4526 cv181.491 67.9688 181.305 67.4312 181.305 66.8394 cv181.305 65.9995 181.65 65.2856 182.34 64.6978 cv183.031 64.1099 183.871 63.8159 184.86 63.8159 cv185.762 63.8159 186.744 64.1284 187.805 64.7534 cvcpf191.792 64.0503 mo191.792 75.0503 li190.604 75.0503 li190.604 64.0503 li191.792 64.0503 licp191.792 58.3315 mo191.792 60.3472 li190.604 60.3472 li190.604 58.3315 li191.792 58.3315 licpf203.319 73.1235 mo203.319 66.001 li202.268 65.3149 201.2 64.9722 200.117 64.9722 cv198.851 64.9722 197.807 65.394 196.987 66.2368 cv196.167 67.0796 195.756 68.1563 195.756 69.4663 cv195.756 70.8008 196.194 71.9116 197.071 72.7983 cv197.947 73.6851 199.042 74.1284 200.356 74.1284 cv201.375 74.1284 202.363 73.7935 203.319 73.1235 cvcp204.506 58.3315 mo204.506 75.0503 li203.319 75.0503 li203.319 74.2002 li202.314 74.9233 201.23 75.2847 200.066 75.2847 cv198.504 75.2847 197.187 74.731 196.115 73.6235 cv195.042 72.5156 194.506 71.1538 194.506 69.5386 cv194.506 67.8989 195.035 66.5356 196.09 65.4478 cv197.147 64.3599 198.472 63.8159 200.066 63.8159 cv201.079 63.8159 202.163 64.1138 203.319 64.709 cv203.319 58.3315 li204.506 58.3315 licpf213.292 72.8921 mo213.292 69.4409 li211.787 69.3853 210.538 69.6514 209.546 70.2397 cv208.554 70.8281 208.058 71.5786 208.058 72.4907 cv208.058 73.0034 208.265 73.4355 208.679 73.7876 cv209.094 74.1401 209.612 74.3159 210.233 74.3159 cv211.237 74.3159 212.257 73.8413 213.292 72.8921 cvcp216.308 73.1597 mo216.308 74.1387 li215.295 74.9028 214.553 75.2847 214.083 75.2847 cv213.811 75.2847 213.624 75.1948 213.52 75.0156 cv213.416 74.8364 213.34 74.4712 213.292 73.9214 cv212.137 74.8306 210.99 75.2847 209.85 75.2847 cv209.022 75.2847 208.321 75.0127 207.747 74.4688 cv207.173 73.9248 206.886 73.2646 206.886 72.4888 cv206.886 71.2886 207.44 70.3423 208.547 69.6509 cv209.655 68.9585 211.237 68.5605 213.292 68.4565 cv213.292 67.0542 li213.292 65.5513 212.48 64.8003 210.854 64.8003 cv209.818 64.8003 208.699 65.2642 207.496 66.1909 cv207.496 64.9858 li208.739 64.2056 209.923 63.8159 211.047 63.8159 cv212.044 63.8159 212.865 64.062 213.511 64.5532 cv214.157 65.0454 214.48 65.7583 214.48 66.6938 cv214.48 73.5649 li214.48 73.9409 214.568 74.1284 214.743 74.1284 cv214.966 74.1284 215.488 73.8057 216.308 73.1597 cvcpf226.263 73.1235 mo226.263 66.001 li225.212 65.3149 224.145 64.9722 223.061 64.9722 cv221.795 64.9722 220.751 65.394 219.931 66.2368 cv219.111 67.0796 218.701 68.1563 218.701 69.4663 cv218.701 70.8008 219.139 71.9116 220.015 72.7983 cv220.891 73.6851 221.986 74.1284 223.3 74.1284 cv224.32 74.1284 225.307 73.7935 226.263 73.1235 cvcp227.451 58.3315 mo227.451 75.0503 li226.263 75.0503 li226.263 74.2002 li225.259 74.9233 224.174 75.2847 223.011 75.2847 cv221.448 75.2847 220.131 74.731 219.059 73.6235 cv217.987 72.5156 217.451 71.1538 217.451 69.5386 cv217.451 67.8989 217.979 66.5356 219.035 65.4478 cv220.091 64.3599 221.417 63.8159 223.011 63.8159 cv224.023 63.8159 225.107 64.1138 226.263 64.709 cv226.263 58.3315 li227.451 58.3315 licpf231.32 68.1909 mo238.441 68.1909 li238.027 66.0454 236.868 64.9722 234.964 64.9722 cv234.064 64.9722 233.286 65.2534 232.627 65.8159 cv231.971 66.3784 231.535 67.1699 231.32 68.1909 cvcp239.832 69.1284 mo231.165 69.1284 li231.14 69.3208 231.128 69.5132 231.128 69.7056 cv231.128 70.9395 231.567 71.9849 232.444 72.8423 cv233.321 73.6997 234.358 74.1284 235.553 74.1284 cv236.949 74.1284 238.313 73.5815 239.644 72.4878 cv239.644 73.8203 li238.385 74.7964 236.974 75.2847 235.413 75.2847 cv233.827 75.2847 232.515 74.7329 231.479 73.6294 cv230.443 72.5259 229.925 71.1216 229.925 69.4185 cv229.925 67.8032 230.403 66.4653 231.359 65.4058 cv232.315 64.3462 233.518 63.8159 234.968 63.8159 cv236.331 63.8159 237.481 64.2925 238.421 65.2456 cv239.362 66.1987 239.832 67.4932 239.832 69.1284 cvcpf257.971 58.3315 mo257.971 59.4097 li251.706 59.4097 li251.706 75.0503 li250.409 75.0503 li250.409 59.4097 li244.143 59.4097 li244.143 58.3315 li257.971 58.3315 licpf268.156 58.4722 mo264.438 62.2847 li263.625 62.2847 li266.171 58.4722 li268.156 58.4722 licp260.472 68.1909 mo267.593 68.1909 li267.179 66.0454 266.02 64.9722 264.117 64.9722 cv263.216 64.9722 262.438 65.2534 261.78 65.8159 cv261.124 66.3784 260.687 67.1699 260.472 68.1909 cvcp268.984 69.1284 mo260.317 69.1284 li260.292 69.3208 260.281 69.5132 260.281 69.7056 cv260.281 70.9395 260.719 71.9849 261.596 72.8423 cv262.473 73.6997 263.51 74.1284 264.706 74.1284 cv266.101 74.1284 267.465 73.5815 268.796 72.4878 cv268.796 73.8203 li267.538 74.7964 266.126 75.2847 264.565 75.2847 cv262.979 75.2847 261.667 74.7329 260.631 73.6294 cv259.595 72.5259 259.078 71.1216 259.078 69.4185 cv259.078 67.8032 259.555 66.4653 260.511 65.4058 cv261.467 64.3462 262.67 63.8159 264.121 63.8159 cv265.483 63.8159 266.633 64.2925 267.574 65.2456 cv268.514 66.1987 268.984 67.4932 268.984 69.1284 cvcpf279.11 64.3628 mo279.11 65.6597 li278.059 65.2017 277.107 64.9722 276.254 64.9722 cv275.028 64.9722 274.031 65.3999 273.262 66.2544 cv272.494 67.1099 272.11 68.2202 272.11 69.5864 cv272.11 70.9766 272.494 72.0815 273.262 72.8999 cv274.031 73.7192 275.06 74.1284 276.35 74.1284 cv277.29 74.1284 278.278 73.915 279.313 73.4878 cv279.313 74.7065 li278.213 75.0918 277.193 75.2847 276.252 75.2847 cv274.642 75.2847 273.34 74.7729 272.348 73.7495 cv271.356 72.7256 270.86 71.3818 270.86 69.7183 cv270.86 67.9829 271.36 66.5649 272.36 65.4653 cv273.361 64.3657 274.638 63.8159 276.192 63.8159 cv277.045 63.8159 278.018 63.9985 279.11 64.3628 cvcpf282.732 64.0503 mo282.732 65.9531 li282.78 65.9531 li283.697 64.5283 284.906 63.8159 286.405 63.8159 cv287.65 63.8159 288.643 64.2153 289.385 65.0137 cv290.126 65.812 290.498 66.9185 290.498 68.3315 cv290.498 75.0503 li289.326 75.0503 li289.326 68.7783 li289.326 66.2407 288.329 64.9722 286.334 64.9722 cv284.874 64.9722 283.673 65.7578 282.732 67.3286 cv282.732 75.0503 li281.56 75.0503 li281.56 64.0503 li282.732 64.0503 licpf294.946 64.0503 mo294.946 75.0503 li293.758 75.0503 li293.758 64.0503 li294.946 64.0503 licp294.946 58.3315 mo294.946 60.3472 li293.758 60.3472 li293.758 58.3315 li294.946 58.3315 licpf305.942 64.3628 mo305.942 65.6597 li304.891 65.2017 303.939 64.9722 303.086 64.9722 cv301.86 64.9722 300.863 65.3999 300.094 66.2544 cv299.326 67.1099 298.942 68.2202 298.942 69.5864 cv298.942 70.9766 299.326 72.0815 300.094 72.8999 cv300.863 73.7192 301.892 74.1284 303.182 74.1284 cv304.122 74.1284 305.11 73.915 306.145 73.4878 cv306.145 74.7065 li305.045 75.0918 304.025 75.2847 303.084 75.2847 cv301.474 75.2847 300.172 74.7729 299.18 73.7495 cv298.188 72.7256 297.692 71.3818 297.692 69.7183 cv297.692 67.9829 298.192 66.5649 299.192 65.4653 cv300.193 64.3657 301.47 63.8159 303.024 63.8159 cv303.877 63.8159 304.85 63.9985 305.942 64.3628 cvcpf314.173 72.8921 mo314.173 69.4409 li312.667 69.3853 311.418 69.6514 310.426 70.2397 cv309.435 70.8281 308.939 71.5786 308.939 72.4907 cv308.939 73.0034 309.146 73.4355 309.56 73.7876 cv309.975 74.1401 310.493 74.3159 311.114 74.3159 cv312.118 74.3159 313.137 73.8413 314.173 72.8921 cvcp317.189 73.1597 mo317.189 74.1387 li316.176 74.9028 315.434 75.2847 314.963 75.2847 cv314.692 75.2847 314.504 75.1948 314.401 75.0156 cv314.297 74.8364 314.221 74.4712 314.173 73.9214 cv313.018 74.8306 311.871 75.2847 310.731 75.2847 cv309.903 75.2847 309.202 75.0127 308.627 74.4688 cv308.054 73.9248 307.767 73.2646 307.767 72.4888 cv307.767 71.2886 308.321 70.3423 309.428 69.6509 cv310.536 68.9585 312.118 68.5605 314.173 68.4565 cv314.173 67.0542 li314.173 65.5513 313.361 64.8003 311.735 64.8003 cv310.699 64.8003 309.58 65.2642 308.376 66.1909 cv308.376 64.9858 li309.62 64.2056 310.804 63.8159 311.928 63.8159 cv312.925 63.8159 313.747 64.062 314.392 64.5532 cv315.038 65.0454 315.361 65.7583 315.361 66.6938 cv315.361 73.5649 li315.361 73.9409 315.449 74.1284 315.624 74.1284 cv315.846 74.1284 316.369 73.8057 317.189 73.1597 cvcpf333.951 73.1235 mo333.951 66.001 li332.899 65.3149 331.833 64.9722 330.749 64.9722 cv329.483 64.9722 328.439 65.394 327.619 66.2368 cv326.798 67.0796 326.388 68.1563 326.388 69.4663 cv326.388 70.8008 326.827 71.9116 327.703 72.7983 cv328.579 73.6851 329.673 74.1284 330.988 74.1284 cv332.007 74.1284 332.995 73.7935 333.951 73.1235 cvcp335.138 58.3315 mo335.138 75.0503 li333.951 75.0503 li333.951 74.2002 li332.946 74.9233 331.862 75.2847 330.698 75.2847 cv329.135 75.2847 327.819 74.731 326.747 73.6235 cv325.674 72.5156 325.138 71.1538 325.138 69.5386 cv325.138 67.8989 325.667 66.5356 326.722 65.4478 cv327.779 64.3599 329.104 63.8159 330.698 63.8159 cv331.71 63.8159 332.794 64.1138 333.951 64.709 cv333.951 58.3315 li335.138 58.3315 licpf339.006 68.1909 mo346.127 68.1909 li345.713 66.0454 344.554 64.9722 342.651 64.9722 cv341.75 64.9722 340.971 65.2534 340.315 65.8159 cv339.657 66.3784 339.221 67.1699 339.006 68.1909 cvcp347.518 69.1284 mo338.851 69.1284 li338.827 69.3208 338.815 69.5132 338.815 69.7056 cv338.815 70.9395 339.253 71.9849 340.13 72.8423 cv341.007 73.6997 342.044 74.1284 343.241 74.1284 cv344.635 74.1284 345.999 73.5815 347.331 72.4878 cv347.331 73.8203 li346.071 74.7964 344.661 75.2847 343.099 75.2847 cv341.513 75.2847 340.202 74.7329 339.166 73.6294 cv338.129 72.5259 337.612 71.1216 337.612 69.4185 cv337.612 67.8032 338.089 66.4653 339.045 65.4058 cv340.001 64.3462 341.205 63.8159 342.655 63.8159 cv344.017 63.8159 345.168 64.2925 346.108 65.2456 cv347.047 66.1987 347.518 67.4932 347.518 69.1284 cvcpf358.404 58.3315 mo358.404 73.9722 li366.669 73.9722 li366.669 75.0503 li357.107 75.0503 li357.107 58.3315 li358.404 58.3315 licpf369.556 64.0503 mo369.556 75.0503 li368.369 75.0503 li368.369 64.0503 li369.556 64.0503 licp369.556 58.3315 mo369.556 60.3472 li368.369 60.3472 li368.369 58.3315 li369.556 58.3315 licpf378.849 64.7534 mo378.849 66.019 li377.732 65.269 376.726 64.894 375.833 64.894 cv375.17 64.894 374.612 65.0737 374.157 65.4321 cv373.702 65.7915 373.474 66.2339 373.474 66.7603 cv373.474 67.1353 373.612 67.48 373.889 67.7949 cv374.166 68.1099 374.927 68.5093 376.174 68.9927 cv377.42 69.4766 378.236 69.978 378.619 70.498 cv379.001 71.0181 379.193 71.5981 379.193 72.2378 cv379.193 73.0933 378.845 73.8149 378.151 74.4028 cv377.457 74.9907 376.598 75.2847 375.577 75.2847 cv374.466 75.2847 373.365 74.9517 372.271 74.2847 cv372.271 73.1284 li373.572 73.7954 374.725 74.1284 375.73 74.1284 cv376.409 74.1284 376.965 73.9487 377.4 73.5894 cv377.834 73.23 378.052 72.77 378.052 72.2109 cv378.052 71.8276 377.912 71.4741 377.629 71.1504 cv377.348 70.8267 376.583 70.4175 375.334 69.9219 cv374.086 69.4263 373.276 68.9365 372.906 68.4526 cv372.535 67.9688 372.349 67.4312 372.349 66.8394 cv372.349 65.9995 372.694 65.2856 373.384 64.6978 cv374.075 64.1099 374.915 63.8159 375.905 63.8159 cv376.806 63.8159 377.788 64.1284 378.849 64.7534 cvcpf382.631 66.9297 mo382.631 73.6128 li383.542 73.9565 384.443 74.1284 385.336 74.1284 cv386.757 74.1284 387.932 73.6709 388.862 72.7554 cv389.792 71.8403 390.256 70.6792 390.256 69.2725 cv390.256 67.9697 389.897 66.8989 389.179 66.0591 cv388.46 65.2202 387.555 64.8003 386.461 64.8003 cv385.153 64.8003 383.876 65.5103 382.631 66.9297 cvcp381.459 74.458 mo381.459 58.3315 li382.631 58.3315 li382.631 65.6138 li383.803 64.4155 385.127 63.8159 386.602 63.8159 cv388.038 63.8159 389.213 64.3179 390.131 65.3218 cv391.047 66.3257 391.506 67.6187 391.506 69.2026 cv391.506 71.042 390.946 72.5156 389.826 73.6235 cv388.706 74.731 387.216 75.2847 385.359 75.2847 cv384.138 75.2847 382.838 75.0093 381.459 74.458 cvcpf399.078 74.1284 mo400.313 74.1284 401.345 73.6948 402.174 72.8281 cv403.002 71.9614 403.417 70.8726 403.417 69.562 cv403.417 68.2603 403 67.1694 402.168 66.2905 cv401.335 65.4116 400.305 64.9722 399.078 64.9722 cv397.834 64.9722 396.796 65.4077 395.963 66.2788 cv395.13 67.1494 394.714 68.2437 394.714 69.562 cv394.714 70.8726 395.13 71.9614 395.963 72.8281 cv396.796 73.6948 397.834 74.1284 399.078 74.1284 cvcp399.078 63.8159 mo400.673 63.8159 402.004 64.3638 403.07 65.4595 cv404.135 66.5552 404.667 67.9229 404.667 69.562 cv404.667 71.1938 404.135 72.5552 403.07 73.647 cv402.004 74.7388 400.673 75.2847 399.078 75.2847 cv397.482 75.2847 396.147 74.7388 395.075 73.647 cv394 72.5552 393.464 71.1938 393.464 69.562 cv393.464 67.9229 394 66.5552 395.075 65.4595 cv396.147 64.3638 397.482 63.8159 399.078 63.8159 cvcpf413.009 72.8921 mo413.009 69.4409 li411.503 69.3853 410.254 69.6514 409.262 70.2397 cv408.271 70.8281 407.775 71.5786 407.775 72.4907 cv407.775 73.0034 407.982 73.4355 408.396 73.7876 cv408.811 74.1401 409.329 74.3159 409.95 74.3159 cv410.954 74.3159 411.973 73.8413 413.009 72.8921 cvcp416.025 73.1597 mo416.025 74.1387 li415.012 74.9028 414.27 75.2847 413.799 75.2847 cv413.528 75.2847 413.34 75.1948 413.237 75.0156 cv413.133 74.8364 413.057 74.4712 413.009 73.9214 cv411.854 74.8306 410.707 75.2847 409.567 75.2847 cv408.739 75.2847 408.038 75.0127 407.463 74.4688 cv406.89 73.9248 406.603 73.2646 406.603 72.4888 cv406.603 71.2886 407.157 70.3423 408.264 69.6509 cv409.372 68.9585 410.954 68.5605 413.009 68.4565 cv413.009 67.0542 li413.009 65.5513 412.197 64.8003 410.571 64.8003 cv409.535 64.8003 408.416 65.2642 407.212 66.1909 cv407.212 64.9858 li408.456 64.2056 409.64 63.8159 410.764 63.8159 cv411.761 63.8159 412.583 64.062 413.228 64.5532 cv413.874 65.0454 414.197 65.7583 414.197 66.6938 cv414.197 73.5649 li414.197 73.9409 414.285 74.1284 414.459 74.1284 cv414.682 74.1284 415.205 73.8057 416.025 73.1597 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 12.0.0%%For: (BMM) (IST)%%Title: (Logo_IST_web.eps)%%CreationDate: 11/8/05 12:03 pm%AI9_DataStream%Gb"-6l&Ol8Pp#u-HADC<J;kEO,a..rHtXX?/3WDrgBEr"$]IOu>npMfG"-'eQhGZqro;Z[nrQpm@r[P7W0CSUiftq_n8(3+J+Af`%LG/,2Hi*g>j+m[5MaL#?S)RkaiNOs#oTPpFYID9[qkP:DE3!@)\VnEgT-*bChCM<K_d0e*L]#m!LMsr_hnB'fe]/3XhL56Bp#4_^%O.Ul@\GGOWpP3+hr]^AQqXErtn(rKfbMi6aos]FBIWG8-opa^Fn*Y'XI(Xt-q;<o<BX?USX2"\!hoW(>^T%$qn%X;Fjh&..o#l77%rUN/Pr!@fXhr)8a^AIggO#MQ.ab./#e\D.UeX'((5MT`R\a_@\pb\JXSH#iFH*T[5lLNQAqou<_%OQqJe\>Af/ALmCnoJpOoFJ^M%qu5u\cQ?MDIf&+&J,G9&X=*`MkUU$9iI?7LiK(2"dCcEMq'(HJIc#VQE[O(@HuJoL+$\W<]pBhC`DHhD4n.b(I<jM7FbL>c$a[t`%B44QWDZfgclZ\t455C%I(r(OsrL`l*)1Sa.nXGTChg\usjIfurS(GEdqtTk<Dr:Tjh;-Y;Bts.;r`Qg_JYr.mG@0e"eYW*:DstCj%I5X;$g;%Wn^\!1#?f1hORarf=r%Da*nrJRl]/Qq.]_bBIF4d),s8;f$"8;_`+/%R+^>sPN$a5iN/[7.Rp%&@d[lr=B$iXuQp>GEr%?[[&+T.ooLT+>ha^D_QM3RRk&@??$,^Uq,XiSEhGG=[7-p(ouC/,XVg2a<^%#bP9/r,5<o,-73,6_JqU;]C#=rR]f9^\f;9aL?*F%J,\s%:B]%JhL8*3H27"%f5L[b-9[t_$cu62DnirsqtU'_Da.mE@8ioPIeD[3]6E%`n(td*%7F=9#6.=,r9j6un*`GQrpo%((KcAu%*9,1,rVF_9X4Mj7qm_(42a?*2s4rH[_9r8;)LmRZ_qGq<PFH-GquJ7C/0o?C0>jj=B)j"G<Fur[q=s[\\*ng_6OM`Kj2\XdD9O5l%6_sb?W.@dgs-*AQL6lQLq=EEhA2opj>g,-.^Y8OPkDN\qS\KF@rk#3ApAk!4XF>364QV"R+n%UB:VW0Ej"L6$00dhQnc#"bJ&kFK%<Q]_b^W'X?2jo-c:]L4[_j;Hoq>SWol)0m*IJDjYiN(S&s--[1h>?Y)rTq=:FF0Z>EpKd8s)ghK(U)`qn?^sMIeOHDj86`4rqN+0%he(=4.5u)CqYJCicZ]nDo_#ZnVN6Mma"O(aFSO[I&+@[9g7QMA\J\W1q7hu/I"a5ds35nBFT3Y95^t63`8BBPo$aMOOFR1TmeuGD%]6A2.s7lGG5J@#=oRXjIj\,7#,<hE-r8ZW,52OH>B;"?nn,N1Ah:ka")`C_K?bQI6q<bZ[m_8\dVpBS]&,2AY>?6t<Y[QkBqu=6S%pYgmBOJV(3qsP$pqYK4_HX4NE]m9MS]1aA=cPm]ch#@@8i8Nud^&Ht#L\pmC\+o%9B;"e,fC*'r4CEO#'%g""hosDMQ:,Sde+K3S%(i.^so:PL@`$HC`n#P@Gn`/s(hI^s.Mo/>omloQ=D#7Q]5/-t[+0p'd)`!&l07PqZ@J^!NGNk.Ub$DUuGIu.'&N6[qh7@4+2lq!n%lfEFtYL`%4B"dlD?bGneCVm.H55=?*^[t$GjfeWB^C>6dVI4ub0!)mE&7S2h1*"23\.1IV2U6<!-JI\C)LW#K`Y:)d0j_ibGS>#E%S<d]K9eQ5U;G8NF:?e.KVLQZS]sO-oEkV+3iA+`:bKJ)hjjiJcjiuoSEBZ!FF0nG]>`\k$Nq&KsQcJ.Vl?I`i3Sn)e=3Hl>Z<-I/%^%,7`.UJsPbN\;:F`hhTF`V\P4^Tkok1X.Rlh/t=L[02UXtQu>f2pSUf/M<j2tP:7@rCXm]30(M9t6$=l/qR!G]S"KI<0INHTU+;%[q<4Z[k826ab-/IH-)D@D8+eq5s+s(")*^9T&k?fYN).n2.+\?oDCX3^+:U<G&d=]QON4,//_ni=tZ`7EljMMY*M2uj^s)4c1&(p%`obI4]Q2#]%"8ja#,8Xb)'gP)gK^41G&n$9YmW[1X`]hMG(maRIe(bR@id@P0!?s8lRcI&HsQ>dL"DHj9>2$GOfnc:PlKe>P!9F0%bEq1'iG5=6h=>^+f/6i4``'C-HsOUCR"<mf?a7/q5F9W;Cp#;"-N;&.F58\)D1,^8c*]B0?AT!f_j?VrLX*sikXc%0.%68Tj/??7%iMg37iMp99iG6Hc#uMJ#[\,2qY+Vp?0;1$D0V`SV._t"jASTOm-J=5&G^IZd(%_gYim;\]"0SfEeQd(\@(i^^H'4(<31lO"DqUZ&%=?YDCH]uL!AWI]/ai:uKo,/9J`^hmsjIFJ3*q+5@g1,k;b,?:8;QgtOD+=0:b^#.+R/jBF.9pJrLm^SW`Z:DF-L]-EH+qPQFIh[]%3+#FKcse=^%nMtJ5JNbSmL&'27-]n*isq2(8>I#XF@@A_8>Kt:"U?6b66a*/,+Xie%2.o>1;-.4]ktk*Lbt<0L69fDb)A-o/7ln6%<gR5#=E%bY_.MUB\T`9<ri@"&5/TQ?g:RcZbiGsXL&_m)RF`+]-[ni2T6PfOW]hW/?R,O,,%"Gkh%=CV+m,2h&YuQI8dhu1Q!%3u%YZrtT('Y"q@R<Uj1),OA/]=H(l2df2a]#q4ko-)Wb0s%l*1L8$OO\AfHA3PHP=MQ?6n7-Wq*foh_s<>.VT3SIUPPI,GL5:\4,%RG%A%6E]qftdA?3\/SnQQLVYfBDhi5YCI"t/2Bj'?qYVM[SMDd?5oK"MO@F!ItaqK#'h$hF$1AT3sP.#2H"`?:/bF@85[Ak`?EUMp]"%/*+4,.&N%RW^0a>\:uLiRgmsLgBc\?6+YHW6`#`mXY=<ISOB&!EOo$4-;[oM,ogd$2<3u?j@T\n)gVsI?3tn2@L7`ad-S^GglO,H%2,Z$"[a6TLGX].^H^d=5gL[l(^HIM0:4)@$"LjpTei]75:sGH[X'2^-?J0XAlda8G4-]sb<fG84>2s@_Rs!:4c"fHWem.N;]\nK0%M^B`c?E\[gmWmolHKel.J)mB?7jFbK-B>F(F3H`mAUYH$%^]it[i+m4`ie(?'<X-H3+dW%1@GL:PH:1UfXsC@`kC-NJ?C[i3bHs-%18>2ED66a6+Ia0eaf'KSg"gd_IE0RK;J(h1ZcG"&REZ,QAAl1+SFnr7fjeW8.<FF/q=0oaZd"`LA@0(qD#\h(j$)VqV`^$%-a`#m%ff[(sA,U89n9(>t0`rP05_KQ-2$:j1!%k-Hhk9sr7"(I<Vs.bLVi?e9QdM<];P%&q`etZ"&"0dff\+a=',oZN*5I$5cA2<W4S8==%PAg.:3e#5b(pGW=LSdT>`NL(NLB#iDaX?S+$WbCb*XQ4u[jsVJ<b",f#kYnR!Ue^1MnF_W]KH1YhErC#p7o#3Mt9U7lA5c,X4"_8%MbN9,q54-#k8Kgs[L&u-r9Wsb=;Ab60X_eqlKrfQ^&I?VlTbFBB2a5BHa@0/OH!Z)6F9fj=&bO?2W;Y#?^(EJk1Ep?lFL#_rc9UA%7"=%<c*aLnW6;3aD:c`'T_e6E$L3N6C3GFIm\B8<rr7)[4Qai9di%aZ^R`YME5bk1$7;^;\#<1CD6]M#CU2>'RqX\30R#"`j;a$P%(kF\1I::.]1-L%o`p5BCI::.]1-L%o`hp+7gX8V'njW9dr@\p<0GRkioYG%b$:Qb`0)?_t;^).N>k5q"bEg?A<U<P\8W#E_Rg)b?%@o4gH]t>mgVC7m77GYU/8gc-\b^m&RSVdog'M['kI8k;d=#<k':4:Me6eRa_c=B7i<HM9h>E;4"]dc(Ekcm(@bnc:^/p_BK-<>%R%`?f$E]UjP^F0=c?a3%s8\u(6);4#tNVM?30>g(t]mJhS)3r*FR)ZHF1d8HJT3-$`gU*p;TIWk8g;E,;f:1jC"<i\\Si`gKr&4A5l%$gQ'N,VMqmDsoj](^9'RGCMWc\pOB&X"WS,\Y#V/ADVWlg<)!gfELN[17n_F9>!0Wq=p+50(@Y3e7rk?gPqb]iPmYeY"^g^\HYbc%^b(Xs$L_[(8'==X0@:c9i[[sR?8a.Z>_UeZ7cu.>n_PEESaqT07^\C&RB=P@6b]\-1onY?s(AU+kN&JJ`OMCefhM!$eARWe!IK\a%"k_PEG-K?>`FA2BLNrSc,b(ms"!G%#:/,Q"+8&hSFr=-OW<XJ3A7'btqsO.?%j)<@J%a$Yf%fC/SIf"66nJLV&[Gub232[p86--e%5H&]-XXUX26EMtU]cj/u<0W/=JS:8R0fN*:M0;59T;b[=C=T%Z0=6m>.iODY5mg,aEn"hocT:b:#IB=[Bd3_W0kM4o4Xhl'Ubrml%B[(;&lNOF,[B*rOG4fTUa\()6e#l-Ae$\*Tl#@=%QVi=<#$S(6[8<hG;,)Ef)Hs22Z!LJ1A?@oD.UnYU2AO00PV9Bt3cUX`SWPI_%A8;m+@q*L<Oo7Xl9k\etgZ)#]k0CpG]bFJq(/qRb5:meLacR:iR?X,uKZ7^]:BOrdmMdr(_m_/A4e8iBHOTX4:64,(S[!O5atE'9%qm;n7oJG4"S\8*7hb(4XgR%MmOn:3j-QW/997M;X"o<?Wm)L[8;\o!K$iDjiI[dTg\XdYVZU/W%'n^"F.HQm`mUXS2K?_(^2tQ]Z%rm#ZchD'L=?,nB)_WSbF4=HBu2dbD'JR1Rs3]rDH_b[`O:Lj"ce#gO:fKB(RlgT#EcgsQjn>+=H[3*)%TZ"isE]%fQ5NjVe.ee,P%/2P7J[PD3I`ERL:hD4KY2H/Yu-DKrLh+7P)l=Lf>OTUc?iaj@2C(>9QIltmM2Ef%%;tCHgAnQ`ZpX6KR^8=gn4S@DhI,Z62=S9C;%,bYDtC1oqE+Z2,TC:)"uaf3ZOA*A@\iRnLc.U6b`]2muO%T/[Z'or$g,/(E%Y:[=Yijs*$>_9NA<$Jl]#d,b&9;8l'J?;K*>7#RV%7)C8#@RVo8q:LA90Z_PtRZXT*ZJKV]bjC9fRnI:4M,g0u][!j(jH/PU`<u8c=:$bTg`d-=@FaZN=lGL.Z\0kaZL[.?26O"s=_*Zj%c\*e+N4e]sq;i'cMkiHVO`Oj7H5Vit#1c"?jJ39rWC9OEpC/pih/6B+]gi!I`VT$Lo%Cr"E^4ggXqt<o2Z"6DLM1I!12rG/+pU%k%kp?a+(iJ>P'8S1PVb/FVE`"+B-6"o..,NEI5].dOpeWn0\OfDZQ'J`3jJ>Dk9kG05l;Zj,-94$<.FN:$T:5ru)-WgaajI*GRUB9+%lk4"^noU(oRnOQr]#iLWWJFReY+'Yf!k('r2]96H;b0<1pgGtBI[!ItYXUL`KYtLSW2>o#\CVYLoF_Z.>,.Nm_Vng:<7=K"g`(`i%k1`9-0ZcrrlloU=3*lOa=!-r(WFG+sAa(Kr=#g%].&Z4j-1mM5q,FWjF^sSL0:s1iI[ZHV+.inF&L/)E^3!WXWo;qbH2+bOn:lQ'%s1Wr4Is9[p6LHG<qmPP@QOWC!cFl-+]B.e:7Ibn/4gW^j!7ZOb^,uZ'#5@14VLfF)ZbGD>VJ"n#o6^70MOd9TSe3Ma?X>#Sb8CVJ%#c<KQGjs,9j$EhXAHlAVA#t[)IJrm<+!LB`r!P=;fZ*\!gWZ*6:+rlsXEigt'&1X!-Vc>"c)c3Ms+B:b(eg=U@NO]i4R8FcbN+Rd%e+:12eR<]jCO2t?`Z<(^?W5S'`!\a?Bf(W,)I=`bBMu*+I5K@i]A7d?3XteS\#1ko]/5=RR_"$H;,G_JJ<L=_Rd,^,l<8Ba*<aoG%6VUi[e>_*!drA:L.QoTOp"U+Ml$9O6]kM,*?>NV[)P3N:>La[:VWYp!od8Y^ETqEek:]tEdPJ%IfYi^>Sc9Y1pA^.pH&`/IRIa@Z%LfYT55/Eb]H0Gh57)W6[o]TBM,Z_XVLE:^,731Y!h6SbDbk>VO^ZuALgG^Ptrj/fC[gpNQoSi1dB_O?s9Ff+OH^\7fLL](%9eV^J%Z0e-[Qc\4=G#-TYE]@6Wr7pogX_CMUNMP!kf(@bi,->QRO%[rL=OW^FVXVBuBh_AV4E)bmpE<-.TUt_YIe8_Z<^g=h.M/Wk`u85b%VlseO[ae_D%pW[Y24`NC4VX*,im0Fe2BQ;>kX%adXuLo.[H&3_dpk;\_eW%LI&;O@5C)I?L[jC_o(AiHn71M-?T<YO^P6p9(H&;m%c0SgkA.O$3F8#Cr,6^QMOEFaVX6HI^e"U/C04g[iokJe%la3Tldn<iA7D5-rauV,ol%q=4(MU.J9tZi:d?P-kicuDQ?gL"35+32`%>!5dF8]3ZLA+(l3B?#%Qr'?+1>"]:8YP[""MY^ao;K2Cs]>_(f\t?[6-qOOhb<n](aqLWVd,%^Nca"Z!r>a?$FZ2Am4iT;Np"fL@%?_hFLEsI`.P&aHI@BUQN[igCW3*nPAlc`H`ma`"31ND3o(,KG<m7Z5$ENU@`d"PR*a+uqp</l0<@Mm%C\iEV6P$s8[&C9SM'?M$:%J>=q8GNn6>?'oBF8%Nt:-+ZBiUTTJn&E!5"-LYZdpEPXQkF/kU=L=u]9\EX$W53WCY6bkQqWiHP%=JN:+4;LVhN?:0hk'\@1nd(q%`T^r3$T%0$aQY#'9s`[Yo4b-5iCG[?cd&>(\"M4A1TB+\kk+dHl?3Or4hg^IDQ6dcJ*X*_\gRp?$gNU/CIpah.p5k@EMf;<3-Af&%=@.H%@,EHhQPbb@N$dEth)$3eGt!G&'E6Of*6jmTim8[*ab`RaoTnh5f'4WMQQNF>^LY(W2+6E:OK5N5pf<^tH:6Gb;cTS><T),n%LkJip(onK^e'nm8PEZTPMO,tsl]T>;6@+-48s_m2P>M/://MsQ/fs=T3T"kNZdj03g,NTEY>N[!];?7\$'`Qr6qr9QjZp=78J56[%_U!4n%^,g9kNVT@Q]4oU#P8BB_C93f"V'F+S6jbX*p;c6%H1:bEuS1F1-N'pFIeTEO0B^95K\GFAY^"*9-"6Xn5.@uHTp^<7(Up=%HJM0ae"3<MSuSeIPk-huF[3EW\LXc5O=7o.\*FoPQK'["\lfP.8d2`'!Ws6j8-[@pT]uqk')KM,d[&ZrSLqT/HI#oWDXS`,&?N=m%+>.KMY0k7<kFkC_lp'C`]fTKtoc4hFL:r#i!56[`^OOp/92ngK"Y201*iEF8T8[n:892mVJc+\7"fHDDq9QGU:9@['*kUXTCA06.%AA;<'PACgIUpUE6^j;eJ2k_DG@Q*qsk1Eo)"&-"2PU3Xe).puI/&p8eqd&QpP;:NLA>F?<>L2bL;;q(\HHDmc_!\(tC6/$=?`kd^%8^M0q/+<ZcSOU6dH3R0R81Sn6h'\M^Oh@V-;su=#1_?qa\PZdC8:NVG]Dgm7eY".C:J^#0%<jjo1S*N"RQFeLQ.mLQb"Z@uV,Pir%<sc@Q"djN<g,4t.*6Q3fR<tL1!&lgoksX[YM7ad&],;pOE9b[n`aR0,O^-$JXpDiI+ug8!=R+>4ElI;NZoODpmp4[7Jfc7W#"[eI%W#J=-n^NX9Ygh9--gCqa3cItg\d0I;rN4h_S\,]q;"=MdORV2W"mGiKQX]S;<RihRg$15B>H1Rbq?P0eiD7)Y+tm<r[/PVgbL<rd%79XJTX_l*k*HhuH1-)4ad5)jC8kL,uASfqWCoC;mo`IDFiNt@UC;jq'HAid8qtKPdhqrj+pn!t\,1SPfSrsu7;=1kG+,ULHkUFt5%41H0hWihW,ZKWoo+&!,2=DNq%'U\3LVjAlni"\aimQ<4&\9`ZS\<H`5f*u(H:4i]83lQDfo#Fc^@`u2d2I8]$K`@`T@E!E((RRQk%=1>9GVQD!"".)1>ReYs&a'@re2=:>*T5mZDk4&"Y_Z/ih^(^4(7p_780RmVfeI*.?m"9#D=fLqbg5MpZ0QJGq$^>Vf9M<i-.`S-X%9eTG^IG;M3:H8blDppI)Y#^Bq>&)N-X>Y9rD"2&*8!b2G,hgUG%TNk2jcu=F,(k+F2^bR%\LQ3nYKLt.O[5,5$n3T>'R9(;qa\3X%GU$EF.FbqoHXocijh/6ofL7=.f_uld\h'2<CD=r<S7LYLL$NSL;E1cIj,JmO]B<Zb.P=[KCZM\6)-jbUj`N(*VQ.4^^2sD#/UP+D%g+%Dg.]M8#nq1]u>_C]+;<kqFi,eOgj"fYFe56Y?..4L0aiA*,@69@hh9EAP8,-,6^j"lFCgDMJF9.!)W6D'<b3Th-l&-)]MTSW(%WltR!#e!V6QX)$A/k-t[#kj,fgb^<gg2[>$.7^U;D,$G)9$1Bs,mdOJJuN-^_5BehPbHU/+3u0W!F[lL[ID`r$_6oN4R&ZY+&?&8%mlP+BiDZeq@pGXBFK5n%gs23Q3h%15B%7d8#Lb[/i8f_pU\L@V"Q.]3k?LXh5*!fhf)E=^XT75oPI!^=/5tY5,\esNc.\@&rihs1%'&k=TG5Nk_hLba)5c:s@ocaLaJh\Qm.T^hupXfS1XQt2kQWSU8*dEjL8N:6^eRNgk+urlZG<,K?i1(X$oc!i+*%OehlG1aKX`ui'%<ZCn?,%aot9][D9?Hep<J$0SF=PWVU_Vf;.[#(;Vk\O^@'0N9)hh4Im/#bbjGf+)c-(?@r6n!qM0J_a[5Wg3/.^eE8R-\rU'MqO,%geInZ/>H*'s0%sk-bf/NSGBWp*qRH#rGC`qh-=i1r8II#e_tuM_1$*ucLor;oFq*6STRQE*O3P=2'eJd:G6u(F%'M1lu(tg:hSQ3%QuWV8.n?:r$XO<29l_X3?F3KpVu230\Q_6AFlpAniM0:&+.)8]'9DG-NTq@X&m3WfbVg'=>uYV^$`a>:V^D7_*;=b/^3CLa3^"$K%]V!,!pbNAJSu>*W8E)jspl?^",DlFki]iV$O!O]LM>p-+5Ebf&,lY8!nYY:s=T[r;@4fL\FGJ4\5@K8tENjK8r]GNo)VPj&Fg)f&%;lH_5$e_V<7K#/8-9f6H42%0/>*t43X7[Rqe,Whnh]`O`EKL2Ho?8^)Cj!f?%XVe/\fJ4l-]1P?Y7I7q'DUWOapJ^RHK5b7Ls>K>%I*?Ei33tQi9K7+:S9I&YcVolZ2J;Un.mC6P<6j^>@4F^hm"A\4_u/1CNtsA8R8ZcD!V,JKk1N8sZ<e?mI00U:'a@F2q3Wc.kQV"a%%6JskH'R4Ye:TF#n$'osWpT/\V7j=FpSiUaZ<qHf^REg;IbWN1CTG)"h7"%`C<LsppkPhu;`WZlb-.L/7=6S%Cn$H--0L/q=5"4p%''(rJf^&$#"s)qtOg!bd&\![UI@[h)<uUQ9HFZ;1R+TUT6m#L&UH!*.a[C/BPN^Vi5rbm"1G1@[jgg@#?B*-1NTsDaV5C,AQ:iHq%2jXO\Yb3K4SD\FmNh$QUSueIt)"F'piq/Yl-MBgZMe%h9H@>"&$9ElQW!\S<PD%%;(Gi_W=$AY)fk78qB'>C3asHTUP!jfc!_VW<%p5#ZYkLYYRdG\SN>P/SV5c69)8\(__AMYbY;t1#a$3KO`?F$@L0[K![1;%Tm6q-)<bbaMmU)0q#08a<OHWg!7C*uZScm5%k-QKY%%UTO9t[&^>'[<cJtaR44$gY6n()c8'=G.>d<GAig0S_WGWZ&.(IT6kmNbBr#YYf3I2d$nWc]BsE?8Jh&25F]6k;)p[aTp%JlcDONk%jN^+'e5'g0<UE!D4B?<SXP,SQGX!ftr$;]bSW&RmX#/Yi1be^D1<ue@="<19HPPhk5#k57Ml%+po[G)#.`Q.:K8ffLH`Fj*NhtF4%4C8I6@,ai19i*,ML/i?VfM'0`Tk%]iJp0Pd+,K=B.(4b"R1@/O5_]BG)>IYsLo#uZfF*qG?t*&#VCW_VF&#UMal8/2nIs2F(e`k&%'?+'M&/=Ki/t`Rl3ic:faid1W@#9ZB>UsdBjirL!opJTg5%!LNBBGAWdK&C^<gGlGm.1A&3YWtmUn/<P;T7GWf_`?t&@>3ae;*C_%^.*8%oHcg&He7p.=8=XXSbdCij1=T\8N!;"Y./[M9n't9eYcOnA!2@_$7To2asjR-$8!pij`Q*!I;\:hC=6u5T7UD4f<lK>U[5Q=%#C!2BcQrnlW+++PST\5CD-%I2c2m0.*L"cGl"ssWI8ldXH$[T1dr-u+J^:Q--U,t-49)[J<aSgd8"I\?eYHuFf_)6)@C4,lF[ANd%2,Ri98[?)rNLj<^RU.o.ID)%TXq1kU/>ni9rW'fOHHGF_+O6j^mjr6qgu$Bsr:eY`'?p+4r58iC^S_P\AbN43Zl>1a-/,>g'RuQf%+!TJFbA077]K>2d.@WDrTa+0!,3!<-`=FDoB:.9c/X'q>pituCc7O50Z#RhSJ^<Ce0^NF;?NVVgOdGs";sX$4Ypa60%(k@/q]R08%i!A\JU[7lC*I&k'$s2RV*sGUsS'b5UbO16,<qNTJD/nVMV(^MQOk??E3+q,ihS.K<E>+\D0V$.t:b"\In8GkYapk9A?aFoq/B@8&%;7q`5OF*UgPW26mWtXM%k7hgUEKVGGVoV_u*1t\1R<$hl]sKkNdL"6tF+'p`Sa_"ff4TE`$.#MjIAWp5n9d:KB6q^?4F?2LVfBCp%&p8[gD#0thr-qcbms!DFh?$^,T<i?c:$QKAJa<!h-8hV-Q]\hY5',TPPb1;^?qZd\k.J%O:,O!Qb-cHUo<]*:*IJa5e9St"RR,GM%nD2-V[J^T1h08'mGK?]kjb$p;E,\Y^VA&7m_[:h\.mgXO\(\iiV]j;!<RW2s8m:-j!=KO'F*`&8kI&a0K>poMKd$'Q\9O/+/.PBH%-Q[*qh`Af!IP:upcLFcTUYK?7iXQ_cdE%?Tqq,Ctpg<I'Isj;jqf8$#GPa>k<QmlE1g#OneJ\1*AHPk:[^i16"]cXKX34RGW33r[%a"Nd`?.%<soQ9IY-aP6*I9rc4#>T`::7g@mLHqFn4h8;(ZOW!Tmq?62(oITKN7^;e(mji>k7RGmQg&eY&bgI(l$;G(pD]F_3Tgui%PcG/af4Fd0WWmrYEPGK)Deb&.F[N!-pf9$i(5Z>,N<?Y0hqG*YDr\E?Zkq6+iHglMSq;I[BpARHo^!u1(I0pc`'`'P:n%up(3>h%%PcCaR:R//QgFssS*<%\cgJ==H2`fu9r+?uth/S;9"cf!b36&>K1es[=Ie*"#rj\Bf&"EA6*B2Fh3:he*j`eNrSUf/F_*#=7d#S\(%3VOA_+ggon1OI_]&]W"gc`5[5`X>hMkn+d9&*=Pp3\+j\D5H];Y-P0shm$FQaoT=RLoKo4Cu0tG3N"h^2Q+LUR+RoB`Bf'_W.rj#%7^]*_AYi?<.:"uL<$l?1$oP$fV5c^f^uqrA;d[jb<4]%Zdkiq%0;ANd;/*_kY+>\;n6D:roXfV`3PD6G"k91/-2fHhr_,!0G6.AL%H:bjZW'AaPc>;/qTF!N20k3sa*MhD*ofl<)>mrO1qa(4hX7Li+Jbj?'LrP6K$`-)>Y^<&BG/Bo\MhU1)8do_'8$VY6-TB9tP+.p6%a)!@-ohTKjhu1m6TmZh+TC_KV\]qgR=QI\1Dt9&rje]LUAN$1_qrC+4Vrq097n2J%jc0]kU[[nr`s%Q%G^>BMG[qM[SmrKV)25!9%.AFnP/[F<77)!3pN=H/\4*7"5<8/#OPL0$mgYD`'S\e]IXTRj<7,f;NG_F!G,N`Ktr?N$=L2VP>iVch"hnK-gpAO_Ms*9=QoafNT%It1lWrUSM)c_'Yi^<]?"q=3nGiO<1.c^8&<H!$Aj3ET5Yh>Cb?H'D\2]H/!Y^\nmcs!e!>5BGjl%drhe_]Skf5(&.Qs7TZY.B;!H%Cf?=sg.(oY\*c.lYJ3U'Fnl,gq);88$j8%P6]AW5LHh-Q)]=&c'IVpVg\QK2iL'MnXmo,:*f][kI1Ze+#WC\]j7#a:=+.[$j:H;j%-=3(@4-hc<0!ZfBiBC1G3Z*A*=(;aAc6ulFi<nFm[b4NI_+1eKLpnN[FMIBp*[/610$H'uk]T]E^h8%:rnq9e+PafK?h4WF#UFAb%>g^W/b5.,/(UK)BSdF>lJU?Uhb_GT$c0nbUOWP%/c*$u'bO,,3jaO2ciO1UK"@)'^\;tcL^E`L1db&LijV]+T^<a1"bm3[M(C8rX%<sO7<#XDF;Of:M[TWP'm)?Uc0ApY*!_n?;Rn_2oLectq+\:+uj)Y+/EIIk-H)%Xl+p`:Sdl'Nu8Z[!9`*i_jLGu"t^(1snSDu`7+%i>;EPZPO)]9Q9O=_[<ujrONB'EO=NQO=kAfdVtS]oF^H/R^YfK3s"JT/Ug40&kiM%>n/X@K!,NZ^L_GQ0@2S3_6KrHB)"5?i&6b*%Eun+kZ%el)\TQSCQNk]JZ5Go#37.P<<;7(FHpPCtcbta/Z;M2,=a8m'*'E"hp?Vt_4nrVE?@mPi*6U"OTc"``G)0Wk)Ra<?5\5rC%*BEJJ9HboTFsGH%aL<Pc+U`fLkI)8.-O<7jrr,Oa#W>er/A^Eg">.!_.t.a#PNC=#YTXE&pDis8$h8>PrqCOSUI^#%UCVI!kQa,:%8ChT4-aq6";u,VsPM>N+KdglsRna5glsic66,n/HEO!L5!C!t0YK:3<0aqJ)R':@J-oG(Zn,d7*6jjY3HPB&nPQq\-.?coRHS/UD%eL^Cl2YXc+h;ibjdR>3Wf)*l]5*JJWZ_g35ceW6!&s1p7>_'qP2$:KrL.QDqY,jXm@dF3&>Vcnf-D+:44>qp;\tJ]%KA"ldM]<38%]?$5@N_)YG<%W#Y179NU@IbjkbJ;2kb_-iDH<m\^Fl]2#'._(;HTLC<WW=hd@>`6B0%aZQSj4EG1a#ljA-F&VR%W4nnF_L(ErZ+]%IH8MI4P!FFWS*>E:]7j]$`=b_YjN6VUPLNqS4F1T^7'?c[[u'qe-gLXpr6"%AL*_llnK_n=IPom5l>4aI9fs'#cZ7LV%'4nVEVN!%\^(gYQ!%KD('jT4>/3'4pik;&JRUB+/3kBsh#ib_OpZ+./L7A]1js&\.u\=q\=iXMFItL7FPeQ#$S'NMX###MJXG$4K`V7"Fk_>u%!%)OpF<&)Ed!7CUMkC0S^?Bnu<r*m$:)UeZkYa;?!+;^N81\@a]--iLeTN1?e\8n_#a[FMCc!Es2=M^9ZPGK%/6<T;7@R]cda-m#%9Na6'qn*BYq`,;K/O4(mTCHf*?pSFpj`=i&@CX)k#mNqpkL.UV_aD8AJYT4&#V&,SOVu1W'a5&2MVnp[fZr+N)".`dl3$_Y;>T43%AjU[;D6]&&5]J63!BU:q?CVKrC-(`eeR/bFo7h_K+IDK/,+Epn;O"",Db-FE>1dFY3rir=k(.Ij'A_gtPuhFfB,iE9dIVcW,D(@h%40hJ;hH.=rHMaada.j*N$e,kmbCDV![#AsB=8kA%nk)AFmY5%&oL^5ihoYUUSP**81fRT]C\XW9Rj5fAR2][%K?RO*L"laa]*:R^%^*Y!@2d8Z/b2C)05R5MSoq9[6(9lP^$rP[JKk(@Ve"!nIYYBcVd04V1=?t5Q1'gB`F'=pXF1\?YQLSY.1nl]4-UnaT6'GI\0;;MZ%nH4U"L,h2C<+$cK`/Yb05C-*6U`GgDpipg2PL3&p0rh:j[pPDo_NBor=Nr1Gc(Lr#RMWj"?4+F4,2d%TF:K4T6cLu[>IA5#WP0VM%GX,_q!]qUN6?o>.&oU^s]&6c'<>a2@'=H%Vo.l<8)S%rj*tZMb@O3SJ3att\$o-*lnlC5@%OeoFbqdd]?!ZlhmI_8#asb=9;Lt@]%@Q3``RA\V:,iSIL(7)i)iMb'XFZfEILf/ph#nC^S)&g__nu_L1'hWF!&YBtQ+:eeg6mCj2pp=Q]WpVr[^a?@<Lb`A';Ip)*Q)U#u%<lUq0PVo\!!'tD9D[WtV<686XV91C"q'MNrk'!D8mKY4oYI2,#5n/>b+Ou!Y!'OKoAto&/7*7;!c1e^_&O)EIX_"4>74#F2Fjm&T%mGc`M#0FD*Q)c1?Jsc](hueTdW"F3:?tK^`KX`a0VduPAa@97Q`\S=/MI],KC.LtGgP@+`o[!b+&bsqt_SY5[=W/'1O2P.&(uDk]%U1;TIC?r:k;VK!i/`8uHH0/*$:9oRLj1X7c2;GAd]0t\r2Gp+AQ":sSefUS[$3(0U]$K/4,j\4">b^`n;0#^64kDJ?#`p[G.NhHe%$FicFJ?'oX;_1gdck2IQn`%F)!e;!TP/"O[^^S`b*mgb5,jIOOX4.,H6(Ch=nj$]P:Jd<g+.Bm%=\oP^"\pr-LK#][VYa!K/*#4P%;KHalg,AG63J?N;"*j13;OS#Igbc!D;X2=tRn/eNF_#)!'b0MY*k)WX_6%u4dJ>"QF\&ElEe(VD^8'?/J9.E9#%"Bq[hb^RXU>j?%Z:!J75b9Ek%&>]qF'KXP;ToDLS-@*T$L^TVKtlRaB[==]md#jUBoAoU_(@.o5%\@@mZnS&DnooUP%?5i,h`=8*%`kK'fTpRq`+;N%`=%kW>qAs@2`>-=.eiVG\1P9"@ku]CiaS4t%V'=gMfR.X&+i,QB@oQh,C:h/<inWY`sBG*no_pa/WY1KQ5j*]j#hj6nOkU^`f)#P%SV_#b$ldRd_JErg*<PA624:5_o>,8Oa^%N&HnaGj'rd,uDY(S0`e;6aNS=N3!M3?5W^SZjC]iAlY9!6;LSo<QG#$MkA$n`;NC!^u%bPI3P:/&lqa`sA%Xkhp/5UIW)QHoB=D6nuJ`mTG2`;mte/&fC0g\F1J:E6M<Yet._iBl#[2nC`H+f]QeiO?0_R%$D<2_fe._T\>[%B\-^j`nV/L/%_smqi5L1KWGl(Jm;qs%8cL\Mb-MYPa&jqKQ[f>C=F83G@okY+9BC`d"/q@Rd+.6lYoGfWp*M(/H!REV_*+=:Mh^n%*]7hs;4h(70b^59K]1dY!$&ZHJ8OBMf&+!@6q>qblb3>>5+oria#TLpF"&R[G2Nt<DP_%=Ssrn\U#a9D;,bDq&m$='WL7PBH3[C^%IE#Kq%ASte3X&mf]_SjK>ER1Fc"XL3JQk,8Yb81Y<W`QFq@>h>Cnc1imobXcpQ`gu3-`@!#7O<_4iJ$=4B%;Ec"]*,dMDB^fMMk"%"0:+D;//@SDmgMjgmJa2r(FB**>Z/)8^0XbU5!(WHf6Cl(cDs$),i'lTFn!?+^Wr5'1&&"m&Y%31C_g\T_-%m`.g%Eja!:BNgK$q%r[>]e)gFso<Y%lX5dO:*crBE`!\KHeU>+>!.WB0ifZ5eO!%lS73G-lD<N/\mU8m8d2QDYBXf<T>83j728t0LYq7Cq.6b0DF/QEbD%'h*0Y_r<(.:"5[1N/nP!`p+"L"\%_];U'W9Q^m7u.rM:.>bkO1':/<aQf_N^;M+3!@*91AVh=Y;"SBMsXE1ELkD`?1:m/61qkCKU%TtocE[S7Kk],G&;^1M0/7VjZo'5;+c.h,8`n*ujREJ5n1E"nf:VIE+S<E*hF4Mn"@on6<1+cGn76PecNL-./E.1>jb^jXW:/r"C`%83]O6%C'VV*7-3Wp=ojqMujJCH2<NLpXhN)+^5YlYLl.W16$u49^RgQg;_^siE.8GT<W:i'I&>I"bY&kCSS=/.YFQQC$LE'LbM.2%B'^"$(+C!<Sk!B8O(pq'k@fr4Oo%aD/X+`#(]d;L.'s"b!3eTq;INV.'ii,FOX1*LUIA'.Z3Is_`*XJGgMn4aUu2EpI+G*he&'^Q%Y@b;@eYL!V?>3:p@I<<@H<BoQ;d<G$@\b5\X8-bUXU"co7dXFI)=Y2fT'Me[k]G/j5aZh66OWY=7XF*sRe:j)g[QN-Y(d9S]/4iu%7a&s^><r9jfOU-i_VS397s!9fl;-hVSSOMFZ@7EPf'Gi3T9D(IlI*cq-maT?aC.VVa=JQ(N1isRFj6AB"[Dk3)Q)g3^?um'A#<ZE%NP-h0<la=i`pRkpY6t:m'o=s[&(&]J3grH*SCI7V),d#hirK8o<WHM`(pCZL(j;G9!H8DsQW[ZIa_7ceci0EY\?>Ok7$_rqX"He,%LJXM2b8@k@Y\KMb\-hLdT&SeY5-U1*T0]co/D0+-0:)>;RFdB?EXpS<=.FFu..>([V`!<q5W^i$D'NsHG1):,%amoAU>&HhcpJ,4%fTncuSO;(+,Z'*JdV*@Ik*P(:`VWUsXGO<_g>eC4<<unR%X:e-8mIM^]I-`jX!$h@8I(PD'F7H>@OaAbAM-t(8d)gfF%'f$Tn!Y@%&ELQ;)l8Pc:o"WD0p1qSGpkG6l5:SBjIsY:l6'u40aH;<5U<k2@9.F`L8r/p$ICd[:tDI$^rkAfh-\`6D#.]qQ/+[q*^eYs#Rs(`%@eYqd1T(Ee4cu88YSIdY:0&4-qad4;G"Ed=qo,2,<Gi\2D"V>7"]H-oDu5`<j@ab^DCd/4J;,m,Q6DcPOp5BmZr,ZiG9BI;"i@FY%Q6l!/l=\>,[ZeN$$Fj&(YU<)u&kN^,D!6s+JK]JV*:.[P_de\l*A-X)9;*e'F!J79cu)M2-ceMJ=`QJ),a-%g@&jqL#dBJE,[`9@%X-S6&QZ:H>?Ms]#:%1MYceo1`;7'gQc!gtsplZt$(66ihb5Kb97?A/2,btrBP;n,(/K/@Lm1EL[\tXiYZ0\?(bojDL-`\!+`;(Yk%A=:55+$p:>*3i)[8NTDrdg?4qGflpU<N7'5C64)mD3BLhY=f)J#^\Z'ek3].JE2PZ8;$u;KL?*Q)O4cD/Z@a.c))Tk-*WYh=sL3h%8QD(*6s%r4ZRHZbn/MnDqmqd'>!r3%pSp5YcN/@qcCb6@8+Mt/b$.Jj]VVFpQD>&5><5'3Re=%hBs@RD6SniRODH:48.Y""RX?!_%T%M?L$\1&6a':rP'$Y,cF/+_)Bo^aFGunio<CcuEN*d&/mc+6NPf9j>EI^\LPC-7H-"nD[1_D90)`l8q)HTuq8uNodP#>1KWen!P%1Eb%e,O#^pTLtLL0Wu>kg#P@_)b+mAk0_DQ;b9,%%F*,,Yp:F9JHYS1I5FV^;Rp)CkF+\.S%$DU8t%#]klo`Un3kLj*8;(_f8Yq"%1m:blEe+G:5i!]!]R$S@0_Rb4"1A;[^HS6RQBK0@1LDP5*&HVtPNad-a=k)%"X]B`V1DTcKbIn9UXUn*`=C%CYDgMr7m!):@OdK3%N<L^opaUc'R(tGtH$^Y^=mpP%X'KDP+_nGYK+/P"ogq%GhIj'52?qr'Qs^qO;83000\&\/Ik]T0]r<;oP70<Z)Eh:B0cseu'"u^O%YkTQL="tfHQWZs^#W50&Md==blS0R*1T2MC[-";)<"YTLgDQq6CT<>+6gNDRAI4J/;JPPff9@X1BhLepeP*F3_F%Ys#h)F5bflMW%ab\?nh,fKF))[,%lJs5o)<.@IBGQ;J8Y$bu?cR@Oc86:i$A9>=UE$nZ!+nAR@I@k;HBR=,[8CONa&P171P3qZ+L<EfHQi'J)g':j%nIrSr;4EoG)@bn$]!`GR@7>/$-'m$mU(,JS6eEPcO,1M[$U+(]h]P=1Eb$)%!6Nn,R5X&i]6X,pCR_]+Wfb_Z6i`SO+3*4cpn$`^%A0VA.Q\6sl7%KA]]GFLK$KIBkQGRkca1^\k`H<ifA+AAV%D@cNhKr+"`Hs7)U\<Q&L*]u.70PJNHSZo6Xi\HnD5\^h$(+@4Q<oN*%/8%C9BNK+f`!e!?)'jo-LpG.2&>iIU/VIi'I#HsH&+H=2S8LrOM/1IsZg\/j;kd?Y%'MF5:@ZaT3a6rHZH.c'*5__J)MdgsP/f9]%Fh]!RHM&E0do+X9AHP,h]62'".75*^2AA3J@>W]WC#`cfSl'`8*P,(s,mj9Y)bptERn?<&kq4/+,i(o-KVZ5=9KSehUj&Dh*%\(B%_:0Q0=VfNiHaMe`!r'FcX);0AZe7'=U,!m[:ngTBXoH"qrnmSJ=A:?,5#ES`Vbb6?j6@;_=E8dW/=+Md!@I2ID/,C2oo<s#;&p<3%6%>g7Pq4ObJXfblgdhT`1A3cEG*)/oB/b<IICZ<Ec1q,Q%-OV#;9,l[RAkfA^>1o#^&F`mT^l&%Z(bQ]-['#Ze]-.bpc9\[T$A&m%cm1&4P6>&(X\'e>:@kNHX*&fn@u_SdGEahTT=mML(u*."ql3@7r=_S3KiGqa`Um5%qLbOD4NZ,0DN,:nT.Fi6lS*1[W+,`+-c@89%\cZ:Q-cCu1:ZD89PVDWU9$16R=d<#'+^isCdMCLh-)kU!?e\1F)d<lKD:4FKmaAVR#qFk!"%0==YXFLZW^=R4Ca8)c;G]Wl?C=O>%(rm5(^MiN60>:l^4!+9cE?-=@8(L6EHt4hp:j$)]ac@!DOQ6Wa>+Hdu5[@R&[R^F+Os)Q3QNjDnq/B>;5I^39O*p&-B[bR17;8OY%J_P&/i,3PK*cBtn=;c#=WGNj88OH<eX7!(BVet:"):tbW'@bN0S>O@>eZK]+;4Jnh#Z)dD6j%<og-I^'`h`Kh.hlgKfJpb#c<dEn%H+h<Qd-Hj&Pou;,1,q80lEmt$\&i?b?,*1MiAG5+OGCaN,[D[HTS%nN:)=c[iEfW+2]m4H1m@?X1'3uO&TgKq+lr>@M`$gVDu=.0%*a6#EnjgeM/]1'5ZtHn;+);VpmdE3a-S90Z:gnI2-<s$`),)_'LiemjV@f*\`>5L_Z,!MfVe3%up=loe`PG&<*X=<c;PdUCPT!;'%"%WH3!+Y!&'h&E*D>C;C`d2bhetb:WLq31OUR/-UTkj8l_#IU$nI:;$-aItRES[>fi""%49;@iV?XCud1^c?%Og/@E6]b.Eqhdq@%9aFS4s3&+CM,])JKh=AF>S*ioG8<V5dPaKjOL1$F(n,=4G=;HE)dmgGl%kLa-@2O7X;(_78St2_Q"O2@PJju)eW;)MjSXgePaigu%b;r+aWECu4K\-IrH>Ur-/L;(h^1&55`h2>Q";t/Z\h4)O<$@ZsU^@QJ,W\b%#I4iV"*FlX(Lf@_6>SAEA'bM)M!7MuLG7Nk*Y$?#%C0=bD9,f6E#clr1LuA\V/C7KS_B`]fmYofqVXE.\hO2RmL@r)OoFn>s?n2)ML++j&-LD.<8GO0Eqmtl<ZX.EU;[0`Drj=_cEHm0"%bXa$K6PueuBFH8kJC?gQV":<:EqWO1AU=ur:X[?Qm?;XtdtYmJFNZ^XXYYTC43>j8U.:qI3h4KeDQ2mo^=maK!^t4udkZa@Pa5f(%IQHDtMC"=n2G.]*CapuHBbd`'_BoVU[#'A\Bh0JoFcLWJ6VR7-I<.4tBlgE-/#c61_U0Pq$^csJC8S%Vnu9`Hi87TT>N*,],nHBh%Ld<oRX.s^mk15A=G8;<f<gB_IUdLq6'[10;21s<cCqNep4nX-q;pj(Ei#$u\0=sc1^"t]-<H)aj5!'%UFVi.gZR,%`OGs>Pqi\KG%8pflq.fDo(eMo[a&&mpFFbdf.h'h!-PM2AVL#d>A42VU4G\sjf8i>pTboW?X22VDV!9t_X2\(OY1jZgp^kscBU'o=-)%Cuqq1an:%mEXu:?K:U9_mDb$(<.">H"!UFrMS4T1utgom^o6*30!ZdIYLh!rAL3VkN&/Q+X\f+VPZ,uQ8UXgY,ncE[\u+'45!*4ZD6,mOBtl<%0[`)gAlN1t.m$Z=LRbL-9/R]P[Z[uB<,l%k7lV?/7B@K??oU'PgfJ(rBsSf@\k7&HLPU0]DQ$HQ]N"-\B0t@.gt1F4D*/S+0j;_%%4dX6kkC_G(FtHYd>Vf>%'':6MfG9bS=Yq``97_Ij2-UiO]G5#V4;Z;)oe#q2Co"QFR_u,a2'<r@(0UI_!%>!IRDVB@/E!h*lFA1H%$S@n1*nQ/,GGNJ`W[7;rA.r!l`Q9Hc7j?S8,LmXEm;g3T4)8Zao"JkVe!Cj%S@;ImN2Zeho!1V+0R:[G?-%ErA62S3",\hXa9F]4%.T"i]UP1/uH^O+b"Vi^Hc#Y2^Eluu>bqpm[;"YM`(R3Ms0d%E0=rlkpOCq#!R`%9?i6.g0F9pWE@M+2[1+$b?e`X[JBZmD3kVX,l%=>S6LdjT`Kdpbn(7"\9oL7s@T:PC#"%**L:%O@-bASB>')D2+?cZ"lud`2XB#2#lZob9k3XOgE+TU`]_S<_(H;?]k"X<V-;JsB6Q%PE\;1k<E&.!kiRHgG>3>^M\I=NqcN:4;aa&>->If!N^C;6&J%dXSI(\habUVAWdKm)LJKJCoj(aD3+t>>bl5u-l;,W6o%BAC<8Q#%c5\;Wo.;?!0f\gRCmr?lA4Y&,Srok@WWL*U<\:Z,b]&6T==2bKiEK-]J]gG#Y9<0^#]krc[$:a*\;qe9C+c<me52]M(JZRKB^p<+%Q1V"WP-lN91E4TQK91iG(s4Etd0s[+PSE0+N,8^Z4^HY/Q?`cUN]Bk7Q8ZcYLP80kA+T+dV-,k)93mp2*@I^:S3's*^CktOOX8Lr%>)hS+770X*U;iSCkO-tV^MkHTA&J5]OVD@^FnK0"1N1U4*?#Dc'BRG\WZQsf>>GK5E*P5N#`B7YqeC%Y6eh=7DNf-43M3tdCBOEg%PcjSiCR,<kX/-7MEp:Z#2,Gu49N7!70FT,10[Bg$e$fQk@".H]EA[gi#h$sccaJHqkb75&*f?f=OEAG1@6%MdrjL9P*(NNbDqrs+%XhSYpGH#0lVj]6.Y'L/X/bJ_iF<g0bULu[_:jO64=qf2pZmj^D-uVA?gZ]Q3*so3P?\`fH;[$klL$bk\RsY@_kTbD&_jfRfN8Dat%=D``'NUgI5]cEED[YJKHT'c[sqVqhnEOm"4=BRX('&TsC.,l<\%B\Q7:E6HIM`oh]WK0rk(W^Q>Bu;*,[bD-PAC*1h=)Dq7lXhVU%Q#:0Fa\pfc>UlZ.UcB8!rsX;+5oLokBh_&mlX#rNc$4QSe.W\^Q,><lG`K6djFRbAmVA\_#/mXZ=@7>;!^$72ro/@^-DT"a*jZ@$%?8VQDBBK)ZmDV*O<PBi-&n(j2,Zcma/Sqa5Brmk+X0pfHAiq1f9mRh*Z8^*KPa>luT&DB-P?b%t<#m&ZXA7`^6Mh@/lmYmg[_)p[%Ir'9?SHIjt6V9cp$%e2&h@d=:Dg@)<nVZ`Z`h]&q#!S]9fmI1..""5JJLU9Y"!>K5$n:[;c,,PDT,Lsu6cfC@FWg24kp#E9FR"HC%HjI?k`V#s&#NA"J8ctoi[';B@K`d8I>tm\9>HP/*'e2Zqj9teMYlC#tBJ(3k*)/Xs4oAB(RnQ\1?j*>:PWbt#b5hi2$R6+nR1_t-%pa"mgh#ooB?$)@Ia/[=Q2-_3NW\dE;lSa<`K'VV>h)P7NNokp@2[eq&rA*[I"!OYaHUa\/9g/7!VC5+Mi.ska(!qj?lR0sA$>[i7%!hY-F*C(dO!)jia2,$JB[I9q`)8<LeHtYW<94?Z/LF\lVnA&hb*I)V!Ho:YG)JpHkkui=tk8K/a*(0`M(q<\CObnn6;r)B)DkQfZ%8kB9cird_,2&Hsuk*MO/Nd*/u;T07rYS\+3USkT)>3SU4>4rV.8kIr^eO:oI6!9Y?BMR"YUk+nbk!4dVdB3&&mTEjR_q*9TBRlNP%]W0_>8SBG+!6:[KV5^+!>>$B5N]LZ`CG5)!W?[TW(CV%<c#^]tdHF'`Ueslsj9TH)9LnWKNbrbrE7*8=QNJ%PDT"PYc_'-OW7pP_%D3dQWSO?%h8A=<4[L1c5&gaqKj/Cm#KE+#hD6[='M3G`q[7&59i$0VS%"3"+B$4mu@]Zm%Ua[Ohd`*uB2f*>3_L:rZMGW_VMdU7_%PL44,\/a/1/-hab3F"(2`H`\`CIK`9CoW+s[OM?#FH7sV+5N\mAlBMcZ+Vd^.p:T)9+8lkhfBd6;[o]e@KK'5Eq#gIl@b9bHf_Ze%^@Qtl?`EaqSlkk*5;`@uE(j`W//bl"*gT_21s?*Bg??Y*lddbi%B!^r.ZW2$dZ]V-cQe7[N1#QO8(k9OjVUbN&Ag3*,sG8hJ2iR\%P;Whto./@!O38+11k'3;*MRdoj],@>Oeqh`=KgSNMM\>h0.HKkLOBLs2$T,'>Ulmt5(qrE3NU#6:FqB035)Pk`UAb.g6U@ZZoN$T%E8m2D\66_+?)&G=?:;!r#3)oAnS=&ukSngfh)GX\faHun[!KLGr?a8+4R$F;P"StrNAtUtA2OnKPi=Z9eo9?'j.KQ>[1Hl6[SoZ=%q*pBs/?L?i5!!#X(X/qa=BKpnb8$f(1[fR\k)CVbfoK@`X.MHYLDKZ(E+jf0:Q]Qt)HMr44euLrR`u:E@F$P@2]XVX_^AK@O+Fn(%S?(To2%h;_);rn;/FR7t2:OH^GHe4g\=QeeH-Q7DEu_C7.<SOs!()i^Z]MM&,brhsA1I=2ZBdDokd34QA#<TpVRX'N5PeD3N,2TN%[Yd_:Xl<7HgItOD>Zc91U-u;-=ls'?TON$pcc@8EXMbT9f]7E.<d'(b&%.^^@m!M_U=CBap^dN:I#&:8>qaDhg8'bJ]<BttGeI92%*Z-$:dV9Ma%.8OHVSJR$X^lB&7h2]<KQ:9KMR3\&$ZbkJF1*g->'Oe,O4H^Q*pV+j;>B.?MC+!&h=ENepsLF'-Z"Z1>SF,r=>UR,%Z"P7I]9p$FC]!kA7]u.BSXk0s8Xe?i2%BmMY72=$KssQ97]AWuot:7!19&XaSkV0RVJ/^D+R@+AV@@Fs.*!]]M..1o6n_Dr:0AXG%F])Es7k<8o[`4%&_XIRn_V$XaGk$Ko%qolWQ..V#-bE>>>7HRs)7)2&BS4;)@_8%:[Zd8qZr!LXPdDkP8P,uqo@3]Gj1YV]6O/@N%/larD?)h:[-.1c.8q"orYI&l^@I:%VC/f$#CjDl>V*"TuA'(0LG>-i%l;7hhqD=Xf#9ODi*lN!*3=7(f=-BiJXpstCYStcH3d*C=%BR4OFg?m-^1cCbsBP[dVhGGN<;f=bI*uk_^090AOU!R\&Mrm1#jtTQO)$Sc@c>LI>RGo"&[rD1?\ZbS*#1)4Y9Vmf4j];]Jl@@\f%:p16(eUbQ7,#j?&"+:l?N\]j8nTsU?S\fY8d^F1"cb`ggVd8fPS>5%FFe@rgH<aOH2,W[#N/c3S'0<kejBRH'V2$@7L!H6_gg/VS%2KAkDSq_d6o<D_N+P?kocn2/d&_^AB6>MSW&!.=9UW9P#G1*9HNoCWK37X_S>8rkRi%7CWJco;#kE7;JhU]W18B'<jC$<P7PI=A9%&dk8@;Po,a-a&[_iSCK5`@-!]jdZtoO@WWk[^t@`!4PD"?7U:N;5G;P.Pa<\<2<6/:o"W4YJ4#DiE.@$V4;TniSF0K39X[\/4'"3%&Rd+'d-A3!,uRP^hNV1$<=pU//=[RPAR2A6c3]#44s3s%.\2-])2q9fl)^n4+c0?D+IPGbi`8n/5[eM1"r"eJNRG_?#LU!GYK0I7%7Ntqa,Lr0oD,/(_0p7OE@(s!Vl/&gYW$E[&;C-#AK?i8<fHX[dq_gr3g&N_)UTC-2YXGptW^:BAE6\f(,P_Ful`#mUXN*VdUF5TA%i4>Y:&\W9CV.jh&/o00XBR</ISDGDfQLkXfM'O.l@$<,fL2=9Y!%j02)oh6BFidP=:KqF<_%;SlK5V0QTa'2pK+fXGf8#Uo$L+sW%XSrPS:e7'$:e2Zq2!Zhmj69-7(3FJo@72er!AHr9c;bX&;?&>Th_%@tUI>)bJkJJ5!LCa"!_P[GYF2GEkYfeDMn[mXoU33=m"dH5%k,in*O>tY#OJqlWjRsja&<g"M2,LeM*he68mU/R>>,WpE4-Ic$(*QVAW!i\q[lU"%Z'X%,.W_GXW<U9@<1;?O<]J*/3mrqe/k]YP%;Me+^OP#ds@[$F=UeAsb1liRHZ$PBYWX]en-ZDV;l$h>ag<-qu]EWH/nEJjiK!F;_RbnO!P3,u;Y74mPVnKB'>a-<%:U*8,bAjY-%F,8/>%7_iVm%L.5K(>-/'$OT"9ba3t>Io'C]ek$_\KJh2B%rQ1WdJfN)?KNji@Mm0)hI\A>nremDs-)Ee0I/tJO1k82eck=C7A>%%B9hg/Be8L>1S6kBjX4'_N%O_'g3]+)R89K@r%U6Y,9>9SCod:qT%@3f-X.4;Up4G7d5_PLPq"W79,f1SQ+:XC$t2&GXFgDM"nH[R%#9=FQGog)RSf0!t!c,S)96#'raWK)O\Q!/:)FtT9GTcIUcID'.fR\>?S^D-#BSSC<$kK:OO$lg=+b<(X.d(<3'6eo(ZJP8=S1;3.%Wjb]tD3Yen?<p.T86e5_68)5:'s0Yg,0SX$</Gm,LV'fM;b<3'm%C/U[4Gh';hgg?PXJR8H-BL8#ShK?-1VDr4?[7Woid;AIeAMI%j^RkM\LpTd4i@+ZX/jHU>X`CC(oB*KnsO)R#?3IIAj.Sa8=9SZW]9L(9hW&+*X`O[KGcfd+<7uGm]/_2KUNUTAsRn@<r?K"XJ4`#%i^q#Q(li&s,NreHFs,Ar<n$Cj`UqeB+&L4TS"k_V<@oDL)64K:kr;EKSd.$j)Bphn6nnbf-o<U)HNh*L(iD=OOudZTVIE/gWK>R?%cT5n/nTBN76\<o@Tk>>bSjmiM]e/bgM<drtR,jju<h.qh@bED$3C2*GSAI4+9m;Q6YOK"H-4"a\bQOVWM=PO,+V*AGG9s)^n6Ib8%212lXmmSl\mX*>$\#InXF2`\`NT.bj2,ud6[D\/k02\oF8sngLBr&>ZOm5sc72%.2=p<K'738b,Ko/[U91WbkdTH(/6tIeB"uU+\%r!VIg,lp@mf5TgVkb/Q$1oYBX4`E4``Kf)n<>n<0._/mi!#eNAl#5C%mV?2@;`fXCQJ;u/K;X7U/W!Z<d?qP6olD43nV<:P=sHFT%qp`mnm9(8d++,Q\=**hI$$`Co'5+BPCR9tp@I40Ga;a7Z%7cN0\;kKLS7Too9'P:O9:e`6`"I1>E8pT!H"k%UQSI*<KF6<?<g&SK%QJ+(L&Ud9+Pc,@kg1-dj&Om^j0\QeKNN=oOa.I%1`Ud)&accZK;R.PJM3Ju4c;#.DRO9o)N`gMkCd<c=i?]sNcmhm0WC.cNRV]\>%fad_."klU@e":O+mE,F@.@ad*MCit0CSYE_6[1$H^VbTA1!@^=EQj<K2)K&kQI",93oCMn(8<e4J-fZ6PpfKBF]GfMP8p7U'-/Ib%q+ZY>RP]a%ZkldpH?cM$ToebnBp6pC`5TF5I:X.pg9B#3`;_3bodjP+W@D.(R50UL\kAnoie$S#9,+:^M)/,:ai#'#h/<CZ_p%T]%$?M<1[:n=URTLRs+dU(;N#\j0gPhrJJLX/YX_gN?*g@5F9KfJebm0,F%"4(O7ZtPmYK`qeN'iN20DN7u'7[:\-hff;:Ap</W/dXG%gA)`"?8!X::%2mj7YDmOFha?@6:!(P+"g\0<1nUZ_b7mH_gJgDb5&01j!+eTSZ.pT'0TlWUlEtZKdITLMfeQ93AP&']`8NNP7c:.%"][<iCDc=Ff:?W&A,u)BjII<>5Z+!61f98=Qd\G;(Qk'VOU<WKkVg'oKG\K8\t?EI8K!1Na:j+;Sb]EEn#>-FA7$WH4[HBW&tc=G%g&S%pFNTP$>Z%os)DO_&_^Qj5I=?<C[<\oA5GH&:P1Ict38LR)Z\$<GFK-ksSS;L<\@l9[NFn]WUdU$)0W1`Y9.DO87N?QdFVRgr%nSQMM_.+Re`29oKM+o`^I"rB)UeMJk&sr;6&__-bRMm!3Tj&S<H0cRoY'>*,a?*/C#ui[!8Y@OH)bn$OO9T(tj>YU7Kds*E`f94t%QJD!Oc(?im)M)3J:Ub^uZZL&)@e+AV@SPm0a_TqYlRqiXqdJ^mdL/#Mk:Na^XQ\_E:)p!D>Kj^_gZ30,:(@h%PRU&UX;kYT*oR*@%+]]).Y0fcQ3^dVBKFcHJL1+h5+;B6"m";#CQB>0.UElp4Rj>@thC81Vm8\"FLg"V[Z]RON;M%:P8kP2d8dV/o=-N25R&6p\T]:E9%cP6)[9M&-\Qa1AD4sb9$5:M0Nop@"c8B*6,6o(rsO\!Hq%ROD^m9^)8l2\b$X5@<@`h3?qq/Vc41>W'CB"T$o!oqSObbbYWNUH/`%Vl\SnT:4Na7Stmbgbm1\r@g$=l4Q90UT8[>jDRSYjDP;W*MT/q;2rG&1iI6sgA!igd@X0E;d8uonOD7M[1-$%.5d9',T\*iVf2nl%PnX^:V;l-$=0>c]+T`(RLn0s=2aq\cRHT-`C*rf7aQRV=3a8@ip/VcB2Aqo`oLSUF8(6-i1)8d!),-:qC#mH&"DKU@M6R(G*V%p>%+a52A=rAnP:XWr#bt?9J[\_5o&g_>/[ruiH'J;26=+";[rGLm@/(CY@.'hTYl\UTJ+'SV:EiT=n,KbBiD-;nl/3BH#Gi"60C=_&m%ecCcZ,^l/i.%8q)Or=]h//_jD?<Z)sKf.XB>k\fU[0_OuC4k2T-E*?nM<-d`Gr,piQIHm:GmR*oQO%(^\7s.2)<J<K6]sqc]o;pi%3\7fL>TSYZG<sS]R.R@sh/;]pma.BV8"htL0M`d\YU-"5JQ5ni>*j;QB%#3hZq*\ZFJ0BnJ9T3-i8WadoG%-nSrO$oA)>R>U&A/c%kH"38?&b-a<c:VHla"KSa?)<[#BJ^j0mDGs+!*^i!-UeQ6e>#p^sO3p;fhe`rdR!,oOir/qq(bL0DYXkiUR5D/24Mg'<X6bb#JoL%;,e-dS#;k>b%rK\I_e`q?G=X9Ct;VUKK>N1h@7bee;RVclbY"Y3b*#HNTWU7T.KG4KNaBhP]=?N)DgD!DW8J7[jB.^^?T0_h$5h[%)ibA)G)g(irJAo2.Kj[LO=[c%dj_A<4#LI4/"AK.)/74`&.A7uAUABHQ7=B-O0;0Na2[0B70oe/m#kM8KUdD-D4B_qLp+i"Ag0[5%8qqY(1IM7:aJc^]\HPcG6\lG_ZTG?("&;N+C:tXn,I#o+L[/fU6:c0XA0/KgH$=T*]00_q8J7?F]bNsil3fo9hcX,!MKgI6o^FSX%RP9AlZjAV*h_%pI0VX9aOMYD]#$&?0S'V2&bhgEK6j:m^K#,e@G#fk".;Q7dJ=q!-!%O\ri4gFPD+"@$/d.]Er`eGJL&6LB)OAl1%jo^>?rtiV/^V-[%It[SMN;&eii1=^eOLNpf#I)<LkBrRST.UGiU7bq,,r,j=J6Os@:mAq65iuOoE1\Kg`WBQs&MWFoe073<nu=FI%kDf#:;IM*l)E(g\6LL5RE$?,+n)#Ams.^;<pk!U=Z2m$][[nUkI"-aG7UG/.637c2-lA6o+L&Pq8:H!egWpZJ'r?^?aFkc.@AB(M%'$:2BVGWb`OqEC?=@cCZ18L%FOiV2:8%D8cPIk?T;6c8(O?/t+*2<Nmb06mIKi!L0JW2?O@aoKC,%Di*Q5LWA%#Nsh9oK9]j@2iU%+uk5u6uWit(_XapdfW"(KsWa.N'jWC6G`H,I0uR'H.Y55;sdBP(3K)C6tG0.V"+fj9ukT%L3rHa3EB<)OkuoBr-J#N(h&qm>o93!%B4RgdY%L]/o$/CZ1%>!2J!@CS\+aLS6cJXF\L_jU8qq?s[Ld\,$!WlYVPOg6Qg`GLC[)uLfO,f;[GM9j"Y(CJ[$C0&+*p,95O:\e%+PZ_s(>K*Sd'L^L7H@9\@i,R7*aun28t22eRW^R.dO+qaZZ<X*JONjPM4^'A1B+k5#`H#+Ob[=#micg8k+.*gk=C_3!E8%Za]Dj*%K9Hg<>OX`@NQ.%uHo@FGgd>F_2WYtW?77*"Y[=U[Ju_;R>OHcQofMpf*RTcCb.W1(cUZaLE][kZE"+0g)ff$jAYHj^!7)74Q"L9-%3)>"C#@aa^8!"CnKt9t_1j_g`=UmQJB?IR9#<WCYZLrG&)&\A)+_0'o)&lq35M]!t\br<&k2uVd?bQI:q<m9i\j,&"s7SUbr8R4p%X4KR`I!bYbo>e=)gjT%PV!\h!J5:K"_/.G36e^_@5NRCoB5[Xj_&[uIpqqU*L[VJGhgS5.LJZ$o0Q#HDs-iI"1]RCprs`mTKb,6>%57b\[4T'n:.4=#i\LE;Xq-RKmTFb*&B7pUVlcZWK4F8uZrq,p_h5@m&n(tc'5W/:<%a%uN.s(\M;2cFkc+s5)cf5&I[CtF8/b4Ho%,cU'i2/W9dX0/W8f"WAY!Rh/VjoI9\rnR6fJ)XCZ&bVb7N9<o<BnT"US_RGR@O?^1<Zfo;5rOkEo2P)!.3U#g5VjIDMp_[A$'cYL%>98.!4U/NM/Ce):3eOk:4?alQq42YA3fK)FGu["^+.MN4:s*3P7ScTgne&0m*9:b##ZajcDoijF\sDMc<R:3U?M2!sO7:B30S<_@%3'f2Q89mtEL."R_)EfG'a_*BW6H:4/4i/G)Nc68QR=n;^^o@'gSB>!j?;85hOr,O.[9NRM'tod'.OqeO3jco=)37*>^iH.J,d>eR%8$WNeNF.md[4D?<3=4sWgf%Er@4CYK@&MCKhZ6@u/CM#4e/-]DVK.'b_arS%(pl<CeR<ULkif5p1qLln1[%(-'Hh@7"f`aQ5d1ei%(p-R;#S*$EX=#.[1"6cYL.@I0&008J?TaR-AKWs/n=1jKR':uZgk?:ubWt+I!.7juJ:5m</dMUX4r*Y.^\Ra=$J?R61)k`m5^94m%!G2Yp5(Q$$^*WMUrZ)Y\mKnu5jZZS:K&Q3'r^N>"R*W$$0ji#U_pF"QC!pW&LI6Yck>4U&E'Te-@SPcr6>=&.c^8$sR$Ss#gOFM!%YjMp*)liTa(%i.r)"l*^0Gl[!]eJ?uf`dlHg+QlS"$ls^B]],A$S)s$N@PAP^m@Tu7OS6t5qu_t!h`dD81tN`KA3$2#mV]EJ,u83%2!k8q?9i?i'8F;!4s+GG+^j5&,eaUn_!PV!)QTMd)"@-G.:BZ[IQZu@"UkbRbs<bZ[,XQ+A1//Uk?2H_"u^4ZXSg6-f+=;DH=Obd%b<Fs7c+3ul$'bbeMKhfR1/LI@ef"WY1([;&KF80:VS&VHR%Asm@o,eS2EEf@:O4MXe[+@cokZ:+KU^*en#J@:+u=ZF&qmG'`fFj\%j@i!DbCYKs#J'L6cCO#^EmXrMQ809@804&il;;j(o[I:D^qoVa0TH%&f9&K2[aj\u@O^WkMd79![=WQZV__rjL8^M\,&l9fb@(KA%oIjq7^+/O#ZfQW.Cd1.H<&d[&>M<VZnhqV$/a:VOE%u"jCkU]`dp#j:.LV!QapDHYQt]-"3p!.7XL-U*b52nh-a5WK^R^?m1(R/O%"A$h7gFScaih;$c<ogsS[oZ+fIA_D1^LLrg`P3qWOD[?KJ:Of6?dMi(Zb/B1)"7\/)nb-H=\<Lo^L(uAVqU5#=+gKePq#S@*i(WH%/?VA_L$5^['>O=Bmn8)'!\_=3/QH`e=4PusAUE_VJKMX-F^LTGG@fj1VQE)5Qi9A^,^I"nCh]rc<8JY'.6t9[cj,qE+H6omQf4%!%]YS_u"N\M"0WutTa_^LSW?nXNBY%SPk+'d\KSV!4aWjI8_'H@0@JH'7rlc+^D(Nl&`?`q>L7B`K7jfX>H*Sq8A7HC80@1@M"W^S8%PP;CO`WLqi'2Y@8Up]_H1+Vq@i@o5<\L4KT<[8#SGg.FE'V'#cL7qK@@#3@j&Ocutm#2kH!G&X!dn`s5SUgkI<]mjAi(&qKFWbs;%bprS&(?f<lb(&q*7F[)/cOL&3hSKF>&:>P6K`NL*5r2Lr)oGGm@JED)19^O!3-X/\dm+$o1/NPZ2O3h9cW,968<e&:S%"XV&T`Qq%bp#RbZU3^"S/!\X8B?RX=#>$]`M]Og/f)PX+(%lF7&t_"@GulAq$Pd"6PP`h#?;@X$!7lA&gTU&Y-<dn&]C+%>IKn$X<Gm"4HiVX%<*&5cQHR,7K%5'Q8O<$6Z+uMi#c*CoDutV)lfjXHGflinL.M+M6`oRL)7kBXlSr8DgudRN[=DcgpQQtkR^*eIQsPoZ>U^iKd!e(O%i4&GDC"2\[et`D:lOfe?AJ"pc!6pn@iq[Jkg33$C!`8/J^a\0&BjMA^a)MA5Ga&9/U2BrffAb\<WQHFoLsc=AWrC(LXA])jqYMqL%5Q5J^IiS$f`IQ,8Zg!f=Qb7T_p^ciFkt*e3dL#W(!jM[FX/^_76VZk#Wj03?)kgkr@=/HM<ImO]<rbrlJ)`8r&]!InJ9FFB1,nY-%*<jcA*qX*r9VD*,juLMpOOls^MD-jF[&)LIGu&kiS1%l$]u0U%P'dQ.1QXIq56L#rkW\!Mn/Y;(\6sl7$5<Z&=b+Noe`;(aY^q*L%W0Dd)#.A[&pkj:sLA*@*0jJ\4Lsa/jdnEA74jD-k@PJ/EJc-T_)d)E:iT^t>7Msa?qa".#mi&F7.=_YUpu1!V&)M`ifcjeB$k^$_%peZB0DKB(%[+m`8lHPu(TL]F(!s/cY:R[^B[+9rt,;:+iVh#5qJlf5YO<s/F!XM,h@5!Q33$Xl$ibDQ[$=Mac[Ius2%Qf`j?m5Vf%:'.3+\J>0\S''%!;/Zi]A:lT:`29V#^^-)T)LPZ>Vp9.IPC(sNQ?u+A*V%,1c59(d2JQjpH*>GA(;h8Lm,8+-C]c!(CXtab,rc!k%d.n)`K<(=8=tJToSnnS,AYjWq,WC9P*iD7PfgtUm:A1[oSjOWo/]*,*0b>*#re%.OarSbC@VebQEpOnupQkOE!"95I'_m^K!9a7t%ZdR7$<5/m&DOSE!1ik3c"/-HfO_=aRD@6I*AqL*+_TGbXO`l?D4=^C4F9n-UW(17:o?;nR9H&L=#%4.9!]DXWl3o$\=Xd($a.ORc%dDGH;!sf#-V9SPEY2!6]((:b3&9uG2,#`rF:rj%Ze,^!C!1B-="qWSh)_(j,)1^U0aAZ+L5\PkoIrI[!$DA<@@>F]th-;lEAT<Sm%RW4Z+$)(seDdjhdBEV-k/1:T,56F/SS]=+acsd4nFMs,M&gDGD5[$8eVn!8(e*<t1g_V6W!Bb=FN%\>>G/KZnM[.OH6kCc^*)UFU%laePgH,7Q?8-,t1@"^ikc\s=&O\)jJC'CA_BqebR!W'Y_90dKH-?:<ECKqT4"<M'nli?f!'W&U$42Vu+QNuaR>M;nb/S](E!5aBV%bIq?PSaTG%qNc;BR"58X(%Nf[Gk3`.,P.@Sp)[-!)u'Pr3`5D*ksN,,_C'@aRb<Q'0^5Q;!*VMhi&e`GO>)Q"#._`-Jo(V&kG"?R%(Zr\kO5N??mc'TTn1_iF9J#oHU=DRu&[u>AU?k+T#CF!)H*XSG'G+.74i%$?\M2>KmE-QE;SlsaLNT4'ODl`$!\"e^8+$[@T4ZfM%&[X:D:=$;!&1M*)6jR=[@G&\<\X&hXai4`B+set"J6*o(o2ZdRhpE!NZCh5CPfIgfnA/t%[(2SuA`\B7UGbrU/@J*bLrg%?Gi3Gs%h7/LLDJU(<[:r[>i"Kf\fto,!2[J>OSAY;T>ZdOR^f7n5<Zj/^BPA7+eK^MM?'[d0Rt'cRL#Sqt#pB<,*XU(CQCrj*%A$6!EfX%S%'F@U-!K"=&mf6C^h[13OTUoA$#DErm)3([6`W3n"1QE.J<<F\N,^.R+`/tcB8pV<SYSKS+pTQ4)>UprA/*4B>ioc9E#W2HD1JqT!%(biLgb:,\9e[uI3;]q,8j`/-7$mH=jF1Q!$X`/MNGp\Ys/GJ@?$A=oRi_Go\A&^2ZL7*Eq_9I`/%9NZ699h=fZ:-HH0EMhR>,GpK%fF4`;bb"<_Gs0b/DMRk!"+&<f=rZlTK)c4;n^-qQmM,.(Ti(tb`k!A%iS*;p*?pZiMEn^b+IV0Dp.V4P1oksc*u*ZWb6X1CXVe__%Y_rgB'YkF)Ef0iK%AfH!C'<\eK]4`XJd?B$S;o,IT3W'f[$.VbPbE9Y4K+YL(r;p]8FU8B+QhVa(cKK?cq#`3C3&BkN9K1$C*oN?%E<1HJ:]_^R<4/$)^l)djG+ZiRKp2_*?%gZg>$NQ'"ff[<o<=kf!NYrlnKd%[B]r>Z_NP3@ghk!>RBPOZ;+SXlk#qe"`G32CFN6YJ%B`jMG+2(gdA&e[!W,ip9#[h:fcVcWQE2bg[7qD3no+4oQL$ipo1/jHmG-\DnXljF9Ck;F;U4ijC6D-CS3s#Rr%T5G"lS##;_P*S:%cWqteDJ**$f=SYB5P+:^db?a[!R_s#:91,,`+T6;chPSmdZ->)H[Mbc%?Dcm:I(]lgd[&[&Y@:5Ba@>mndE9Qdu9rXX;F5GBY\p+%/jbhe[(RSBJFc+"OM!`4!/>hXO#+98(gj^JFru0rkDoXi&DE%1YrX=g%8&qC,A.S+A\k0N1a4U^E1_at(_!"9KM3s!O';$P.[88)%Y/ijF%!IYU)D+#0,>A[5Tjhkj5l1hCP6HMsYN46,\EM/!0S\%[^l&U+#WCrpFREa(^UTpF`]CgH3gcm1b`r+iJZ#RlPmdZpA-[d2%!b;9BYcDD%"A=9\-,[5W3\hVUOVn^RM--Fg6Wbb^C*=C8"p"'0oA;>HCkuX"%Y8fVouU"GP-CRpE.`o];;(YS!Gd*EF>Gt%8++2q%#"fO3bB'm9"<_/ed-N2b!:t=fE<D6o$5aA5V(j[7I.[Pu'^=Zt<:E$YYRCk\3^B\qL`%bs';L'Z1mJ>O+Td4&i`gq2',Es3;=Z$g%0ulUSF:LlS\$/5QTNP4tQ\G,EH:DOa^%4l6fJ\AkSLn*.?#Cqt"a8?F-rpqD0Cgb#_19l;0R2a.eH%q6q#_HVV`(jYK7f.K1!a5-%)J1DUSd_X$5TifmV>LH!XTnhKoEZop@sR!aOoP[oWga7fej:fC!MY#7N6^6dqh<*2)$5%0(_gE;geOpZO?jIZb_ZAEJtUf0\e$Nd%!Yn@9:nX]o8dBo2!MI6WL-6Cp1+575$W-C!1b"sI9\Vua%:lFJ2m.R`"`?'48mqf.[\*eOGVCP]_XRAE(hui\6Ni<j:1nF>4^],!%!O588*<[O`6qJ6Hb]KF!`;BT\Y[.M&7e!kh,h>f;HG]jp3'_:kg.6<HTVF<aOC`(?bhfH'#Y]NdJ-Z_%',\c?D(Z=!IUIFF3'Jt!%WAHto%),R-"ZDToV)SKHbeU51h42dH0uJnU2?8j0"-Hpa,Z)T!%[#K[.$"Un""[7Z"ni3MRf\:'1G!Jkdn4UghG?COjN&JTV+MLK%(lWWiG=k0#%!4U^)>o3sQK#];^*kB@(7;PUn-d>cKZ+A=D)*Y%X"0='X..PJHfP$uQeDb^ZQflN,C$BWN<L'0jOSrd&^6/q,!c2E%P!"j$OGc4Q&?u3BTN*C\")QNZTjf`Q=UPE;$:2HBkU.#H)UpP6^nY);Son'iOs/Un=J1P/=q,"/q3BtmB5mZ44MIE8\XVOT,!M([%&6S&dbS1$m2J^Zi#M+6bV-%7I=9A]+!&,#n"#p8mYUFJp0RuXT?ni6j!/CY@$/c-bGS(dTRAo?^EK3^<+Ch)<+QseAYWi3loaqBN%&eN3.=>>kL+E.qmKn.Rrl-.C)eeLJc"*uXj@,Xi>,BRNYKo_bno1UJj?k+mc"JHY`\q/g$Jd!T&L29X'(q:[^Y^N(A6k\-0)&RU%%3A;1%5%e86Ur#J;E.5SM5po5.9gXG*L34KC><rb=b/+fDaPEB3h:1R'=_D[fM9*It>nRe"0VT5:!\$(U\O(6l*Yn1\,Uip$eKe?J%+;7!@_7POk@Y([*INjDVEEnV7%WDQa1kQ%0&un`,NYqRV86gqH-]M9P/!1SH't2=-2NfDkbTKH`'0:?t$:jianTP2^B8ls!A=3E(%$e&9(Gs=&00_uQG"/V2Rd&Hgmo,%IKifJBb"h8J91K[0S0UW6?%P8D.ZeFLI&m3]m.Dkk>@V50p_E!Pdlcc$;r>UVNLp$>E%VkJI%#MDi9h#432Cu`gi`[Gj[)2-u5GXd:ia;sL67lUcu79GZH%,5sBcf@^AYV6G`83jl(i7YXk3<^'1?o!Xj!lKXHG]6Rt(5e]E@)AP@%PbA=W%AaNY#!Tsd&nqPYiV4D*\.U4D)-*=P?/(I8'kgN,_]=A]p>Phdi\:S<%G_>siT#J%Prm'[5_AMGpmiV"QcYo9T^_$a*"JXW%G8?@CJBAuidS(Q?^>k,L\^621T#t\,+:L7!'R%a*XU2jN!pMYb_a+N\j,5@0D.V6uc_pn6L(S5j8^6ft1ATjn7)59n:AFq$b]Oa'%1L]f>CP2cn5[=2SF9$j,L'oFB!7nr-JVQf7JgTD/Lr>"i4Rr?3m*\R$(Sh+N57r$h"sB3FWb\"FYOFh_1HCZ3,KUEpJ/YAXc+/Q8%gr<4]8W#Bu@)Rbb%6$%5p-G9B31p5>Y]9fQ/S&gN$BC8;dFtgBmtb<u3nc3]2K)F/@d-P4a:)f*<-L27T/7r=fL/1=32@:-aW;Vc%@KXZ[4F"/P6lZu2=/omuf&A[B$@qT\eqFLGU,ai%!QUVL('@CMGESr^=nik9SnT>Cn)r@ni&s70D;Iqf3/`;bJTjs6Qlr[?_$TuM%>Q^qkQ)HB%Qr0n3X7O1P,C1e6*XalW.SDf?r$*BITjn.g_3M#UUV6gEl<)i7mLs"H0O4kn`sl.oO;ItY/d'X^Bba>H;!]V2f3=&f%PL@BFTb7XC"L(RV15;4[i1%l;1I?ZG+sL)s/'L<eFY-&@[:H7ohdR@IWWd4H,.g;_kUJ*i9Q/kC.SGA_]@f!&""+K[g_J*Hi?cUG%*S5%FLsq[W,oA*C`Sh*#X]Qq#kfN<\\kXC,On^>f7+rIB*RFo&!;.kA)DHIP_"?U,(?f2t1,RX\^o"QALGcT:-)3M;`Ba(<;`H*o%7\`c[4"!3$_m(QnVNR%?"f\=1_.nRb4=k&(Ci[$*=9bi3C:,%nL*Aa"`f&\Wip^A7SnhnF^e(+R&Hc^q&=A6r@C_1$N!F)Za!?oe%[T`28m%,X8GH/:uPWf:$(Z6u>YaK5o)Hn9=k9^\U_j;##rXj=`&W[^JNF:h)Z8+ZngF/@CZmJ)Lk_8r<=Qf`B.=MPJ0E_hS:/7*4%_;lM:J+Pi)FMX]6bZ<69"Nr8`$KX-=\,tc@i@5?iBWFQ^D6otCKQrE3DP"-X1RGMDZdjsp(W`8g.tS^)`%03,5\D@#;V&;ng0,3I%LH/qiJ-$`q"Q"MkEU\964GB;cI%2XI'$tZ]ofslpIMENj&f-$FK,@^AA9\ut(c,(@"&35o:.8>@UeMmsL(*L:%/LFfBCGm+>^<]&%JGf_477NS#OcM?(k?=/R%FS@'PfqO_E8?gihfa`Pblp`tN/T1nJml&4DNR7f)?brY_Y%l"s-YVbJgDRM,Y;L]nc6nSEmYV/"9NWe%gg/oj&Ps1]j*DQXH8#jqJf\<qA\80V[Z[<(1<Ok0&m!^UUm:HnB[]ip"QK_P*:TAoCF"fH5"+b)2AQQ\=V-4/RQq$5#daW#'O/hT%fWmdm7AG347kjK\E"Ru9:rB\EOONnbXFl-</!4C7<eCnhcC6+6lU*C;a-E7Cm_I"3!>sJ066&J?F3XjuYWdg?-E%A0WhZg3l`WRX%5r-A95V^6a%Ue/sB-Mj@Rt67`P_u:bnE1u6OqDBL)r*3_aNA@&%cA^RhBH.<@5_NjPc'<Z4&;M&S-PQ9(3L#/'L]`gYoYC/$D`NM%*B>Li14i4<2AfDE7R=IdO'O7[$im#siB?\]Q5-[GH!$&$;+u0a`<Ymi,_BlF6!tI`h9DCE5=I2WKHXqmAh/Y"^acn94-Bb_oHN$\%St$IN4:bOdRI*AG7M'&2$k^PFC%AJlTUX$d@V,1%1OO^.e=QWdTL&Xub>ZKAJ`22-Z?fU'@u9MD[L4uZ=]>GC*(WP___b4%i&7BJ%)8T%;+L[0"Wkhjja0$R![;lsWM(5mTH<AU81QP%!9B8X!R18i!*\05lOGgqe#Ae3%;$+]:^]H*BccoZSa:MB$T]Nu;^)>_)W1a?Q%.=q_lB3Z%%19Ut@=/bd$C)Cj[B&'kWq1H^(R5E*E^iitm)U)ef+dAl9:V_46$:>C0T(^jqI%(eE)d:K+LE(kV$kO#HGLiOuKf"Td%&VL*?@&k$q25e=c$+gjRC<ML]:=-<+T;3kUUD^7+Zn$D^aC\gKan92nJgCbY9j"!h,-Xb_;=S/?Nr\#A7T?<!%=p@/]3(!'%J44\%9Bq/kblELhjG>+(K(uh&Q2uTaEc)QUGig04^eCLn0:"_S>RZ/m<g-WdA-!>lmK+1;Ru7TkTm/eS6/8,b\8<,2U]\XIK&<tgCUG:3%-=-O1(g>l]?gZ&HWCE2m=k`-b4,Dt7p$aLU<lQ6gcNhp],9/(^m]bJsT_d[4cj:CU8]pK,asR?L"NCH=?,n&hB#,gDK2]c<?*JM1%At?sHe0>_RS:Mi)#Pou&n(MAnH*[)V`82i,=5<VEaajIg;Jd_41MY1Y13(nh90k<dON"$ul*_<'(1mFC9\>D^?Ij`%K9hOWbVR,q%BOHmRa<+^q%%VurDc#10Zjke3ifTge%UMdZ\\36I5tAqV0.72L,&2qj),KZO1.e6eK=`YBI)'nmc9jmd$P_?`%)i=kpcrgW@2%gk%W!Df>[Vr_=4?nP43)V\k&$d;\8]+E&+>CWj%]k1oH6r#'!hcL6.p50RD4M<k!3ZE-XiRYV)rV*V$STe>gOLD?d>#aNc'#mUS8_'8%(qUE\d;_9!H2Wk[`2#a+@gP1)hTV2)fc.c("B5R_+j`tJj7WNVG#hfFDi$3CJcVUcOI66ra?Y6J6-/g$N(_kM3cakH'$=Voka%Hg%OCh=50X[drFft54#"r-s[A:r#p?+;C*5W+CH&_IN5j8=j@&k$q[BC85#gH1m.4[_h6Gk?;>u7JX+YLV>JuaUJ.mha,?4B^DKRr'1%FePPh-mT\?9+2MkJ0Fn7"2V4,`3nW>,6NGA$n"m<%37k>H[XZNg.5't,W0"T5_$tia`Fg+,VC;CK:p+UXIOTLH,ItK2@<u/56SjH%Z''sD\X/k`,G>A_G$Rde%5U)]JjV_2"kRKTG-1[u-D5k+Megs'+Z!sA=[tebaIksFM^oF^JOfFpKI]A8<Il>:70]tGcs%f'$C5Pk%#T;ZYbXkiVfh%EbM^Oq;\L@fDLd[%Vb4((OJ?0bG8&benB/\M%(_234"i?c"$k<p1R)&Ys2YNH$0'G:!P.C(MB#T6`djS&pa]hlP%(_O^u2)\:5QK*Xr!LXI8+]3R53e68+;nrOQLpm5[*A4.<nj9S;AD!CV/lkV6JPdZ3j,FKKh2<QdJBBK5oHs[s#ptlWS_22\2i3$8%J"tfn<+7Tn(O%`N'lA^2LgG*P9/1M6E)\QYW^Yqj56U^+#?LD@$WLj/mE(]J'XZ:;P^F+DV0N+h_KK3kZ\Yq#Of]a1)6Y+NHE^0F%r_[bf-pUCa/)g1G*Y%gN5RnGdCb_6C4Q^?SS3,ZMmL5#(U#_f0(RV7c)VihsBl%5:@M+t7\5Mh,R46se,\V3<VAa^@kLk&7"?I/-%4)hL_>/9H\eQX3K$n)q8<I$XIJoUl8-#&t(0.=h"(`>dUJr5=Ta,je@]IC+SeZ<cZe'=E*OjgCC&=>apnQ-6*;j]G^ch+!9VYu#k%5E^j*ehVP(K`gq,0\BrVS3jYPN^TM'"@US+XT@4+juk!P?D/5i&MM18$f80c79l7)+KLKnpJr18()\J'YRHbpK$5/<ZVmZ<48*F?%%iEMH.RG.GGgf6s0hdmJ_S^h#;LsJ^1YsSH@?L?B9(B`O1!EBPJ/c'D3^f:A9cB!dmA/Df/!K,>^4dd10c^M;%ZG!HgSl6B2=DQT%1scLHF.h:jki4MaPp4*^7j86q2/VE>G*/_^@go$+)2Io_rhSX3fK=lX,BX&p`,Wqq,?<FDP=AKc9UZ#Dbfhe\`fMPPkmd=KDY-ri%cbAKWQr:eh_/:nt_'$0,!Nr?N;\j/=B3oFI#rFaXd(<CqJSZa?2D4'^_GhB]pIi$Ye[/2urVoH9Q^u7(DEI%gc9#PAa_mWs\mOYe%aUM'M+=-;P63p_.$Q5/+JP76DSf!g)p5Y^,s!j%C<CPu/04N1KS!PkMGT1h_o$]F39-3\oM=j/5;4D=McE%3Jo&FZ+rZ])a6W2L5%/"Ze*1J[@.Y3oL`([gM0^?[&\GoK(,7+TAN?'`bg\jW#GMn.#:>T>Z=f(SF6H*kVrRHS-2H#k4;0Q25):WDGhha[Qe(6e.@?I-9.%A)ohnO;r93kuQMb)=<(Lbbc8R5,*=,9=%c":YgESb]3]_l%npZ=X'=31%ZcfF:>jhRY5m?4.O:P(`Y*ANo2hhY>^2.Vi?r:aJYG'%PD:"H/@c,Ga/3!_Lg]SuXf'2Cml=W7gs_SG,,Uf'2p8?<\+G+4gop06TCPZck\A8^#+j8MFR4#a\EDHEgkPfNDQ]?=LrU@@ohY%(%(5^_8;*;s"F5tWXld<eP'>;5VoaG+o#4V),kFc*a+]ijAAdgi'I.J==F8eIS_>J=;JgbF[T(4B;Ons2#\"S;>"bTV#G^NN]?N0Tr%pR`tN\YiC!9T6SYFeR6o=$.GdCRj@6Fn)E&9?Wl>-i2;tfJW/@86X<SLGJc^E)sR>Y+$2r48WC&PhCQ^rAS98f/Y4K)Z&b4^lF!C%]I`%Ti.4VD#7E"S]k&aj#T_IU53kL6KF:(oCF@4I-iAq9YW(Q%E$A7ki$o#pcu.n7V\2Dp/UAZ!If4-9?RL$$D4$-0F#qS+`MR8,%b5lFIDWfXAKQ/A`dBZ0D$=Ps4DTUO&`g:LCk$<LfYk<GaG?)`[54G_^:CLJk+PCHBFtPOJcIGN8^C9$YoWL&!\2e"_PBQ2'G[F)l%QpGs!R5C7BI''KL,hQ5ph*''1B.:tG0L<[D]'2Ua+jTj@oXW[#3.\t,Y"^O\k9.3eA_BfhWiY1Aq"NZq)u8*b$51m$/Sd+erU`uq%Bo@3XAldS3R5O5eaZ-B]*,7KZ`iLC.Y8l3Je1>(V(-3RIj@rIppQ8Ob7=Y'$H0eYUdp9Cfh-f;Ts7Q-D7fKm&!n]o?(ogU'Xtk/G%Z'pIYB]WuBNr,J>>gPipfbe_r/iTTeN_X'jE5\#b)fca-l#Xq!;8eP"g]3XYS*c$^5TW&MNd1HsT-Fi$nTk'?]`XHWe-8SCj#&Nh%I,4F_I^RVPZ\L%9L/c<9iDOtj<"t$W[s\_bR:%A%pQg(V^>"?LOp0Z->U5B&pb@qM.Npq1c$Y1nn4*Ke:5F;%X/P9e9dS7'!;1e6%bEEATI4['V1#Bs9g>Q>oZ3ia1?JYlfP_k44d0TkPBXds-QXBPK.aI/EM+][Zl^:`(7k4[u,]Ml*cN>mS&!rAB1b2!j%7Z*T)S2a:%#n_S1!Si$t!^*u5nO&qbjbp1(*mc/hC-"NIp'X)TQiSd*'j=X"26s;_#Wl(uD?:GOZEM-gKI``,[Yt'fOdLI]e\J19i$I+.R_+P>%1ik!+L3=td`Q:!jR`C*Wj!T;1dfTJQP+Vr)a!/jK%.f9Z"6155<YIDf3-&iD*S8Ag/a_*83(,q!@_8*Ucd8,<)K.u9@X\4shA[EX%"G-@0=+1R(6A1'3#CVLB)/`\Lm_r**$_r:9K3g\67:k'iciR,*[Y0'KXQ#%Egn2&t^FeAb7b<pK^5ia(=#AOJkQ9,Oqss7r56DH?%O=#(X$HF"j*%%Z3K%$XLHX]()quDZVc6iC6G!4k0Zipi!)14+E!`%,*7D6Ng%:/"4"'[5Z`k_:G2n>;+Sj2dU/.NI]B1iM+l51Nt%B]u-864!B?AEeneh\mPEl"En-OV?%.9'\k<0'3C(=3GJ_%+e3SoesH3/C&IOR(Q2W<\`d(?hlFbV'oh1h$4aA.%\PUgIoisQD#Ic%%BdbPAY,AmFY9.)V,+oU3!Z!`3H>/(_9k>k)k;Hk0f]$Ukk%n"jS_#dN"SG5%a,eC>qN((Ll/&J.#Ii^hEa#E+OAs<F`7W60@Ia.%91%e6&1SpX(&DX-<TR\/2bDr^i"Aj%OZ-nrE6dAfH2P`Z+W$7II!q#tL.JHYCV\6i4e:=pUII,2LHF>t9T!tLR6lSKWH'bdq1.Fs%k6qn"23/1A1p;*3O)SqmV74MjgjeJ,0F$h9Ta<=8^k`+#fDRDl5;V2!>QZF\/694G<^8#(:>#_nofspsSB-Bh3Y%RG`\N_DpGT`4%TqN;FTp;t-I)#U'O$Nfc9WbK/P+ab=,g?1HS,&l,efn7_<Qa?&b`OA'aoLF!>\6B-fkje!#@`'`_>i9bWd:0[rC`LY#G(Rt?[h.X%-$I6'71*B^'"uq#lmX!Y']Oo.r*gW(</la[r%LiW%$,K?=ZAoO,M^)1C4o)Y<#C*(>nR&e7Rt46JjNl/0AV-=a5uSaQ,=JDf?;9[%TKn@2Z"2]]!YF=UQ*/Lhdl@D<T&ZV(=b:/(k&/H[]Pb_d%8i2F<OQq]N@r\LMl[s5=m0/85mqi8OWRPPnMbEB^-7_W/17(+]^([F%W,r>-8k5\9=]n&j=Fc"AL8Z3]'GodMXQ/*n`l*N0D,<gkaX9djoF78_`V&itM4`?rM^`E+M<)6V'SXr8H"sggV>ILK6p"L/SW!kl%Eq)fQ2Au-eV(U(AJk%`2S#aTqG+,RSMt`0-a?b5)hOEr"B%P"o4V;1)lYC[I!=lZZWB:>7=>_,[\g3<'q$$\R=TRQ\JEqM!q;"L^%en^Dum)1R,i%"+^l2gI>+a(ZAXh_4II_.'k@ag42]]j<CU(k+sAVMqKcOpA'HKTT6P0)A8->FeP6sO0H/tF[eA[+4p-A_!?74WXI%3f(hnar',Y@F1\oS/(05?)$)Y?6[%XqL3(i7R-ugARFIQ$5$_>_c!*BL5Y!55V:3dFQmuMrelg!.JP&0W!G->V#`N>:M58m)hGsA%9sApJ[T39&L>!m+[KE]BB&k4G@HLA(9rXT3RUP-@=f70e1r&M[g%i64b$`4)5uRIR8<gc3aTtI,0+2YgZ4CR<p;@#TA?qCB2FA<5%,T8$^cJ$O\<hEEdMbYn_5(]N5X7/ZIcKiUQ:Be3:]?:0Z-(NAri*39ZJ5'PY;M)deER5t#:Lk^OUWn4/aK=r+OJ)3NYMurdmVXFB%_)\8Ud%h^r@*?PUYYs0C`5c:o0k\?LB2-d54fDc*Thk7;,HjQ=1KA>q0C^tIeph$o?A&bh&CN]mohi9SggBru8CqZ3/4\Lqb38Dl%6Dp2t:2\j2>=,C+FqpkSbm@jP)015_i;3V,BL/+.l`:9mZ:W2U@&7.[.hSfR\#+5Bb=)Xt$k9r7/D.`a$"P9>[bP?+`n!mW'VMC4%"0ZcC-T7k(IR%kZ82Rd0"!4?9['5RVe4t`E?@oI:\KS1&Ona0,XZ>n^Mt04e[t+Ds8?Oj46!H`p#3?d*/=DkC#]]]/MbS=2!ul;a%g+R#t(==(<r4:FCJ-E$9i,4.n@:JGBGO]2M-kmG/k*BF4:13B7/7!G)08nYpY=T%:@"QXhiBb3KVF's2WBR?@(QfOGR?hKQ(NCK)%8?*M`e6s6r:-n_jn2k?,I*!#Q2)/PCah?!JUn[f#eA^dNW!Is9<,RqAbXlhjQies^R!J'=eg2"5eqMC+fIL7A'N;^u9r@g3l;WBQ%D0[:oO-b^8Q>,6Ub+.fk_@M/ID;Z]cRiG-](+ckB4H/q^>bL:o$:q"0*/lOEjpc<2!:kq/2pI>ge-IZGG@$2#a5/^W1Kp\SV2<;G%`6qSAcA<ab$FW6<M/s([b83$,raG8Vgkn'jcs"!?-iq06^br#&-diBhOm0RnnUR2&qA6L7dk=LERS>#8j=EF#oGj#:m7B&\=c`no%.Bp\,>b;'2b+T5PqEe40'GIuXm,T=)R3`E\'\a]K<SX%V1fD-*;)-kS,"O,aY]^O!:8OL0Id"qIJ^n'JR26!QD2*U%SZGPKM?Q7$%PoppuG.@VF.u]@a7UDi^Yj'AXR56QNo.jtboA8$#?@UL)9<-F>1;qa8L]kHHku7(=PtJ!r5=Sn#]",7l)8s^O^C2`qf;iXIRijnj%f1c)\:,,+AdK'H,fgK*kJW\%%ct&%kYIkPV$:QG1J&k2)QTWQ0XC_"KdGh5r`O,8)^JLG#6'7!h&](IYf`5WLoJ#ht@H+9gKM63R%JAA5iME'ktT#UU<AeECXQoWie[,H]:^g(/mP@>7/LRsPp?t5AQO!)bdZ:GbCQ7F8Wf)]8U6&=73:;;Fd6817.K"^G8q[hihbq(S5%3;f*X5dDoY-ub74]?`*o@@LN+4@Z-O73<%(8)c_bTd>s<B5[%cASWB`+pEjE_<*1HppA\OY`A"3(Qi='S0gj,r[hO&qo*,:5Qc>$%guhM/\j+GO*i'LnE(U,0$-e_,+M5t2AI#[?<nM$qpC%0hVP^#eonT^"F=op/`4u;![Hg-S=YnG=9R86A/R*lYKN>+lO0aBf>F(:#%;YkRJLMUY3oiLD2(<s'%$b2qg%JD64U^FQK"0/0,r*#]K49^QA'ol]i-H!\<K*7EkaW["3lN$mEdh3L"/%G=S["++QWP5-u?qVY@%DCRp\.$McqU*7iLg)M\AGIKDk:+<0I_T4@e!`Cln6P/7=a^@j_=/PW-`^?_LfpFK@O[$A<9T)fu+o8RqVg&rPXK"4'lZ)H_VmMh]%o/F-g&bR+-Kk0^7);%*W<Fdn_]4'(1,d<!08E442V:Vuh*(H*?$`M+4/55^,+5@sF4V)=uQm6tf&GX!5X8@B[[$uoo/;gi0d"?kl%KPoambJlZs_T;=dAEIn<[)3"]X\ADY5^E$2Y"ukg<F+@4kfab8T99Ji)N`_A<uV<IO#t6[*X4kGbK`H6Z(V>8Cr(>+(DlJ_7Kh--%"egdAIn3msX(mM,L=A-7p%<SN,0FTqLhG<+A]/2"-'%E!O.hK:6uot`mP0I7WLG_?rT5R_3I[8.-]/NGlA:(G=qF4ZTVPcZmfU\O%AtdBa,2'ro-u`!^N-a.OYMhRn7nJnCi(9&bRtMWIQ#CV@i(31M7#=WI:DoS+U/j\PLKRbB)7qaOi%=3p1I"Y:l9q7BGIWjtYX1&;%LJBG_nZlsb,/h;D#^nirfV7ZB-7(%1o]#+4[?kM?.#AR$:69Wmb1:!o8Q!Ou&kcbmIQ^2caSP#g5)s*Z6*e^8nY.lQjMSj,iesfu%q4]erA04h`b!7h`a"u`CK#pUjVBu,POh>inO>Y_8#f]<@Pt54R1ID8(gjTks.fT@Yf[$SHh.@uAM)N^Z6i4Zum'SHC[h*jAm98md%A#4[/N9bPh+/YBu0/MC-O4u7&7/*#>*JIt"?%-_@ojfRE)2E(a\/:QO4klDP7-#%:rXFM/OP5D<]rWpgSDY$d1A`lN'_2$aqDD!4%j`JeM(2dg_!6.3g2D!qUE.`a?@@I%sNM-&O3oXn8'Oe:Pk%!2=Ar@g8,VGt2Zc2VnT<TpD,qAdS6t0.R.s&M8@h6Kj=_--$7p/?)%]<aYjjoSk+P'2P0#_85W&coFa*61n962GVidE;/lYJK#:3C>_-=hh5\`R:2Q8YB*fVCH7(q"ENY>'gBA8O;0Rgn1Hm.Ijdp.a>-c%0N^6B/^)8TaTp[3JDSpd<:U(%2mZLg#NL!q(q9aR@"B@A!hA7[$%s6b/!j<U+?50qMfYMd]C3dJ>e_s:ed<+f0G0tQ"<Rt-D5n"6%Pl_l*)aFN5W%&Z/`Z9kSXX<X'mZ18V(%'dO<*VIA4]kH@-t,rl95[cQ>r$8.4aPLB,#+:)lePTM7"(-/Uu=;<fdbHK$o,!,;;>JH%^`dBd+nf)OMR0/3$j#[F1`0sPLuhG\`JTD%4Gnl$P1e,3[jGo9i]QRTBVSrSO@^)nl[?jHVIZC&[S;V$Eb<t(R0==f)!!ftQ<OJ`%[&Jic@M@4@Tt#fbaX2nqbI<1ICb$P>CPmnW\.9A=8i.8]'<Da^a^lI#ilRK<eWS0'Y8rJP(q^[,Bq3b+_:?Z6g6CjXU!``Wn40HX%I#?V=,WWE>P/@#EU([g)M22HqcCn-Z1!5!8MmQT/H97f(-jk""4(!jb`T_-A7WGmH;-/Ac*/qqbP/FW1)t5Mh'6b(r8cZ;8k_C@!%[&(rjfRjAb11[mG261"j1FP2%7ZE=T%f4Wo.7F^#K?=\TMA-X/J'&0PD'[iP<mB<1ZL8G++p+SNn0FKJLNr*iPIAG8BjeR?dT)T$%6PHXRUeO>pq-U()5fX-jSQ0fY[A9>@m)fMhf<!*RC#9Y7;bY!D_8ZF>$Z(^+P,6-)7f@&,',$^,_f,2UKs`,l6QMfY4LO=gXD)7e%+5S>P0;b`qiRp/59sc@H>\EHNAVu!XQPNApWV_(R#Ra'U3WVsAT</8MP5&q[=7_rO6[<cE-P^VWF.M&d/GpP]S_D">7L"T>l.!0c%J"4$%,JAsQl1_TiQF-`#,)rl2hB7AMZdXH,fiW*"cD:ZcWbINP'1T3+S@ENPEFOITZ>mS+H%R"D]'mhN.GGTqe1=;<ZB#(//n@(q%MF800ltV.cWH\GRZ&.&5#[.HDP]ZFoH)To!5>=CDkpiFcZ1><([REuZm_t$@Rg):o?jLR!.\:Kqd,Hr*&pe)[g2O3IX44!j+ZXY*%-jVkfB38Fs"UZ&`90Tim!aF%WCDKN$BDPkDJ:kGdk`UiAQVso,8dngWo-sAJ*dQ'DJ"/d*,1B!.$Y`[H8sMrsb[68.8+,4p)GMC^%M,3\c9M:Ik-+e>!gC/C3L)eV&e5ro*)3/-9:9dbGBbi5IZI#U%Q@fGd!:#K!qjA>1$E!/U=-`#K/?qY/n)Ia431FeJA7m$TW3jVT%5saSpJ3Qd/<llG(AX'NsU2WAA(c%]D_cd+Ug/=B,6"[aW"[?_DaPbQDnit5JC.",A&:C7O4@'Gi77'!'3;ok*bV_#!_!9V``Hbc'%?)KA5.gss`"X`7$($'_g*DFbgoCei$:sH7QNT^1p5>L9>ELQq@d`StnO=<HB$MdaC+Njmei:O=OGg(eILH#0.Y%Lr?(J8I2J";c'%`tD6?par[4Jbop95'cWZeK;?`iQ3a>_]_k^IhUCd$O##=,gL'a;K]Qe-ba/@,_G\@-4/INQk0l[C.Z)Jpu><na;Q#tc6WHq%('3L%8?42naYIGC$.WJo*!"b##<\jb=JI=mB#7RKRgY*\DV-Q31qNr46F1X;n16s=iJ)rO44"kKhkHo'R(lt>(lFq.nm(V"L?Ngr2=!uG%;$9,QdPBpBjmdJeC7[fl+>Xd^cO_m/(^\/**.D;PV=Nk[WLk:9)enghm,DNoZ&IBTOE9oJGZ2n2(liGYq9)@T?U5f8jY>-Laf=/?%9b7_T0G=>-V\8:Q%C$Ul;G"<R]s`:#0\[4C'I+V>h,90)qW;;'T4Y)G(PYpN"\9b$b(@i9H)^5EePm$Y-i[tqjL2No+HRJ7b,DS*%6]H0;.4XOePtQ^lDcM7%I)):rbm>];k.&gA)0-#mZH78OIA"r'PbHP2!f@2QMBt\P]ERLOZLU8%^HVZ7onOD8K'#-ZFU;N"*B2??%6;N8#8(/KM4]utsP)dbp-8"q*49]3"dY)s9Nt+Q^.1A)P@rT^+i7op/&YB)?+-$gFJoRa`S'Y+RlF"ZS!`@AX"sPX+KOI5T'tbsm%GF4=*o0Lkhl39WXEtm(I5#29.R^sE'4bdcW&-lSiiUG*hC2nGYI#:)qL7=@/3RoK*e0E.qY6T&(AD@b>;6Js@2F%ll,Gq'"+[EQ@%OAU\m:r\I?FL*X//eQ(:`1GqH-T<TFOas-Yj`%X#WXFGb4H7p([DA/=&S;^lK@,R4Ia=G;f^LT2VcbQc^B"2&V/9Vhd>aSpdfRu!%"p7dJdF!qfRH;l5kt/<lY>(m!135J*r@-NQ=BNJMW1>+bJu8G)Hm5Ns_Gp'&jUQICBucqWME6U8O**@udW%^:,-j2lGmauJQbaRV%*#"_`WWN"*Q7RH*)u`@</Ehue6bU+E%1Ph/G+;F6IkUF=NsW.[_go"QmpT"q&F,4VRj5SNPl6MN$@5a-6Sd_+4:_4Xk;,^-LTN(L%h3Y-g2B$QlYN8/TU[GF;=1K6?NDu7VWI,1G&u4ZZ)YW3HX1_::I%&fa:nKpA#LJcHhAYPlgf%;b%R"t^!l&Ujdcohh9aC17ZoSMR%-erm0kXq)1AhXJ5`<LqZ16mcd@Y43>UhnlQ3+Dsh&m<1fi&9\f;fcp!Ek"'U5)IQ+pA5UaD`Qbb[3^JT_eo"0/8\'YF&nn[paFfa%eOr<4#+""]dPEJd\7)ij40]9Obu(m]7L452,ae2I'(]koL4YlpZgg_B6sqfN,8MFkgR<&Apd>b&-#Na:`dM2>5A^]HJFa./L5t?[%<*(L[U>5u=8A^+n"hc@T.DlHKo^$ZP30GIJ%Ie)kM`8+/a./_17iuMYH1nqMBFR<E\"gjk_$ge5GMnb%WM]%@lY(*p,f^O['u]$E%-7d+tRhq5gbWDHCA0U-h<#Vk,Ms[i&5r^T(pror^cG&-MA9C7%Tq.Y=gu8V"T<1UiO+.u?4V0)='7?5OK+Kg[Qq;Y\VW5q>IBVLM%k2LZ6@RFZdd[[1[9ZM5h)o5jeNK"./APDbR[Ea(5/=5\EXL#hFb5p^Q52se/Rt;1]Z\[@XFE_]pJO-)E<caq%8Q81BAV4bY5T(9R%6goB8c;<#n#<?D14idS:7LZ<)ptX'lN*0i'._$Po?'3t<\$JV&1!eKHR%k3jj=S"-*:Z9[jU][&!ZU;hZZ($YUIIfV8MsaoO;L0R%abm-<TZPN[5oJCbg2!o1ak2]?4N2.<Hr)c*b".lZO/i?")-'30/4Uu9E-%^Ro/+:=q6B@/#CU76icUfnD:j$AKOHgV!J&GY,_f]2%/Sl+m#M^+$^EI>!A.*g?/^\C-EoH:^Q1E9/^F\&0bJDE?Gs88DZ7UpSWgD?b@jaBnNG,h7Hco?4`SQV:Hd1^&Z&en&X^t,3a`+!L%3VH6)AY`S0r*6L?:p9G4i#8?]!^Y%n#TZLk@5J%/d/oGkd2;Nc95J"0TUmkX(#lI73<ukoY-e_0RkS*^IAD[/V$V]Kn[N)<g"=nN%Pt7:%DXaqNgiS,+C'c4XX?sMV<=+9F1a^LRXN&<M5>@X+1h\bTqCrr>\EW$)`I?WY$dN:,M#o$Hk5FPq]0_/Ndl',Z%!-?rl)W]F%L>i$YPA2S7p_-)2ASm?kQ3Z6Yi]2[@fX,<(l%ZZDf2U$$ECu$IPE?#saL+D`W8fcs.QDKt"2Biqdj,iZ2(ZPJe1t^L0cpM0ONs`%%W=6s#d1'O<(+-%ffJr:qe0"C<RSpZu!:6R'Q__Jj32#ZY]_*uI=+%q$^UE7a6>/<bL>cJa!J[NcSeun_p&UZ5VqFYg1S$02"fs'k%0^(^>hWWO:(ku<Z%Ie(0Xdb@_N`H\.'u;td9+iouEdh-6\5VmDOT`S$l7rjX0!Z[_:IM@fD4Y!"C`[G?D07RthE;5<fJ8WA-eupt%[=tI\G['Jh)lkA1)qqXr#=c'[h+YRS64Wnli3Zq$KuZ?h'`QX^'^g&3J"9o`eF4,MXdM*!+=):_c.7enlARD%6`cXn*_WpX'@%/j%Kk7jen448p>`!%0^Y)a]o-$Qk0Ue0N7t>9k/&dY4@\&ErR"EpnnW^/298d#[Rj&;5O7;paetGg/_=-=8Vp@>rqD?!ckr($$25UD[%adJ5Poij$eEgo*g2,4*E*Eus=)-%CuYn1^rSu>85i<^'=cRRRP=*j6rTl6;^#hkOq>=4@p9ngbeeZ=(+>EPRb+5!H@p01%fZ<"Y6%f$nO7V!t>.YhJoHg[n[uht_/X%o[LQ[hhR`\uCAh!>+^SEmn%_`O'#..Z9:(g*%)?5"dF7bfj2jJ=3YcGlT,^\9Dc;Gf7_2Q/iqf%/=0$17k$-d`e\Sc;$#"2U4(m1BT:WNl4A)f]EbNJeEM-)BJS^a[j-Q.VQKK'Z^_\O/@^@t]tYNNe#XR))-FlI9)s":EKLWt(7SKn%'u8XWf">C65oL''g[A=)m&;%LNkgR<Q%*?E33Cr'KaQk['1MjFb9X;_PUm&e&9+KiML<!PYR='(BWj`o&\+<TD=d<rM"fPMLFX7`%+K9*L,p_1U>Ed9H0nb!5]^ocD5um.X^Y.l#eD@Wa!$%FMr'HAcC$Htnfeh$fM-h(7g^61&Z67Qd]9Xe3Uk\bNBE-6@,W6pr^-gs*%@:2;sFG[.O.-S=RE7\%s<\kE\G.0fo8qCICZ3/(LD-jBiGYa:TK+LT&^CD!jiSkr>CI$>LduE5m6&WbPQqH11.t*W_`.rlhiRMf8%F_CqV6@)kYcfdmS4[mf3*:bcuhX=X7";Dug64N6l7lFWHTq3:Yp7`i(JZVEL4"aPWk7CNDh*)73+R)R#FhDOQFJ2B;NAe'f`G:pN%Ml/#\,OE(Q\/(WrSAT?qYQ_lX]bL!P+o&?#@aPuSXRp4mE*L%$E3Qc')r:"miJ9c:&_.6l-j9DnJ_W^."l8WRQ,'?8F2>W-P":IR%;]sN"9CT!dDEMBfmpuuM\5D4uU5fWJ'6:9\7fs9pk(5h:rbtoq!!&tl+XZbalrZU%Un3U"VPjQ_Aj>"d7G+"&_,)*r_2FcaSqd(i%Q\Z/\2@pC#MZj)W6_:'PcD]8nL.7/YV<Y/7)-K4ghT`#m!'FghqgfmkJk'^-=h,D$A'?pe\FE*eAn.OtY;-;cd?=YT,"f/^A0`0(%AGg/+EMW(7!Z8\ZBkpUhVH0fuY.hK3;\A&<V*FOJGGD#Js'4bZ+l+lCQ$Z^!dtHb)IjbKYh8fX$49W/]^jKTa$<%L0RK4LdP6Wfp%Y)hJJ/1LFIX:30(!-neE=?$$]X:&Q!H3hC!nOO6<"9"D"(a0.:%)**o>EHh3a<OpF!>!(Ch(^.':&CB!38Plb(\\NeiG=o,Sp6(=%`k4-,G\+oKhUW@WeX^i^h<jiK<YD$WOc]6.:3Zd!1mRIK/m24G6AZ,Z"/^%<Ld>aAhmG5]mtf1NI$UVq%`1AfJEG*#J$=4YM(6>W%b=`s]=H4@PJfV!-+d)=<UtJiBbN$!IbH!MWPCsb?`MA.gJZDq#U_I1-5^\Yse@ucNm6(9ikjc%-VjU2nc*:/344Vb>)5s\GU.GLA%!3Hs+ZOK;BbL/[)Z_<W\].?GV#I"jcY[7/'hP*(@9-/OYfJXeL_WWXg(aD-^:/<FAqB5)l/=m1;M4#([#9`#NC$Te*`-]qq8j%hs%.fjYld"o)PC%6'K_s>o@_%[30d11EtbsieP2XrM"C,P,0Cg-]1_gLhSZj\;POX=:11-q9jbUeOmIOKK_E@a2LIE5]kC#*D5VN"*G%q^oC,11D^AT*"pT.l/j8KIj-&()I@4gN]X9CYP.KAFZ8&FY[s]UmV7F<8#aL,QRHJp3cdCBY>RqKNeTcVPfP?c%0akN"<65fsm!`%U+QrWo^418!cHp;Qfqi!C\#)2LB8]@N*5MhbgkG_VK&)Ck:gd9ig.;9`"nABG\osXR+1eG$4FHta4j;($6osZOSG9!WcE.*1HqoP%N0nX:fO1K_A(=>6,CV6.aKTJM'h?X"7\=9b[jr5hW!h[aJmslg%9I3DoEIu#8J.1QU!ei<(_Kp!I0RRi6]0Ndi2n>L_!Z)T)Ro%V%$ff5OTXpu>2>dJ#@"JDt3@[FgFnnRYq3fP6<D1_.)m=*^qQ]S3'!lnbikYeu&/1"dVp,m!:p<$1.s4)bF-"4*]Pf.n1ms6InRsB:%0!f8C,/@oMC]M+SY>W@oJ-TP],$q46D#jF#I(8Te=E6:2]3bJ90[!.#=Op8I*Psd[!8/K\a=Wl@S)>FIg9Jp`[gQ!h,nmBOdY=SO%)Ga&K0"!#-<.Nn/Q?,sRSf>f4ihpZeos"-ol%?YekgO&m`PbcmBa,(][%*C'/sJ70I8gjV!_n4#qA,[]G8X,!e1fZ15UTh`&f[-F%;A_;5ENAI^iYEi>kj#Uf)LPiqqbETe@Ig*9A]f6l4'C_D4>Z&^_M^c9)KoYs-s[,rG"68o8kqCQW/9P0L:nJgYOf$o^f$#R+9n="%^^8X)q,]0d+d#lE_PtlbGT\j@GDE%dKYZnCD$>*<5DjaidLgsi!^NOt2N:5,8q"4N&>HHe*dOk5%:49h70c+Y[56P#fJF>HD,]l,%o8It3d4[JX?qWrqf)77=e>ui$$(YB:5EQ]^0`#LY:K+]WLqbhp.YDQ).-k'4A&>DKf/)X*0s;6T6h8'dbOM]u/]e6@$bj&9?e7N'%PQ.Gu!tlt^;F[i6p*7kpRoIPW]`.nS(Xj^79X);CV_hG"1IEk<8DkEf<S21]"!6BUWE7MCZ1"?bEYLp\"T9+bZ'->Idk9AV,#Yu*%="a\\q5IIPh+L9FWJ5<W/KI("koB%Xhj82k3mTB._2)gjME@&tlB]!8#!!BnY/3*Q4TTF_[nq6*[-3iRI[WDG)\aE2eQTIQ,R^;f%c,!ao'QZVTXAj>[(U'@bK('75n"^bUF9K[KE5Y`U8r0ZYNi1#6a$N>#9XV1T6km<M^AG.oCWeq9`.L6I`9=$Ml`7oI82hdf08[Wf%83]h!;JhK>9gp[_:dHnW7=1W9jf2330G/R:8C:VnBps[.NMKkpJ=6gI8YAA9k&kF%KX+7mE*Z]f'Q/KTQ:5pFCU1li\o'9E)X*ZI%QE[;R*_kg_M^A\>s6BZg_nnXaOa`P6PQp1-Vq?h;p0esbKoDQYh,NpG@LD(nJO\E4HumtMlRN7;\mhjOKa:dnM"PQ=((ctX[rnf\%*K^,Ro]ujo./WsT*;ItB@LhQa?)QUC,ksaYFR:EpHOfYr4=%lfE/nM?j2&+IfX*!+Ma:Y_[k@#WeYM?X6ZH1qVjWK\aUFCB@G8q1%Dj52R]jD(p9H&^r4C$l0TrH!EH,Rlslab'UDb"CA*NegKlS-<CU'$4W6oC2,I@MCU&P3*t$B)!U;HS^KDrpImFbYH;>nbFG?9F#-%LaFCnk-A%-d"Ynb[\OF%10uEp*ok>+B#]CAaGcMnQ+o_:'Z%O%a#"K=*J2^T-Q\R0N#jO?aPG!oD^53;(J*90UeVI&KFX>oF^o'?%@8c9]P[Kd@kPSag75jFg9H^;W,Dj&C\]$+*5@Ru>+c^iS&IDa$IQ;6j4kA57mrE):iOp,.WJl<0CpB,M@loieNsScpmu2O<hZisl%7Sa)OR=/gD$\t"SMaH_>m!NV".Y=tJX,rV!O8HhD'>k:KiChK$KV]rC\g][;g$>Mb9i_W7Y?r2W&pC<b4$I8V^WN3M#O@-L+1uCQ%T&F+2g#g[f'L_pUg/!oR8#mGS<kVaMU2DD>%7jWYlNrS%bd=8NUL_Gnn_7O;OM#jC6k:[+VKX-dRnG38WlaOnM)&@:ShChcW2<BK%Q=Hf37*;!aN:&k2\bP#rfkg4gUJQIN<(SN&#5_htNS;+F&Y`nF%UJSNo?]q4<Adu0S]"FMr9/MH4rqeh>WJa6O:/UVZaWIUe@K'6%NtI.oS+j=De&QR_Zr&R*qmagd2WZ(=N0NdgCfU6t[$sstX4W?Lc!7\&/)CL-BtfO0&4kfTrGL`?8u)juV[rei`gc0q1DN52QR+-o%PPl`=L"CTJ%"9=?1tCll.C5[1ad]IAF`iX2hPKXO9BeLO[PY+GeCE4A0[_+TUAQXB$XaX)>R2ZcB#n=KqJ"ZAnf4U*TU@Sa$n7.k%48WNsW264+[KMrj<iAd,oHWA(9lQSd1RBlbi$.^\].Q3bPX^CmqL4\**BqXp=9j%XLo0WCa_?Mh/(o,0C;#F,d'gJ1%`/b\]5'6]%Ok`J(BaRK?)iJ54r2jBSQDi2#ba=$12N)3,1M/](AYp].b``W/"LYV#-!C"f=*$4C6ts\]f/7`dBf9@%.Y7)gk%2"Fc^j%4h+VB1%QZj]"E2DO<A0#7:4_U-fZI7K85Ku^gnq7Z5e.EM.O!7(LU@q,6Pou*^::Z<OIZtr2V,T#s`Y*:G;Mc'0[O#RCI_aHV4uT--oo,XJ%hBCNef4?emBISf5AtpX`cB/)rP_1oq'k9eP1W=;+*:$tpQ?X@AYfJ0`[?#U34[K1pAT?NO2k0;\/n1t,"@mSUo8og_`h]7UmQh7c%g`7[DlIM6WV/_m3=L%:KML%8Ob2#$b3Qhrn9U7Jq7dsGWYI3Ai'$s`7H!'Ut51EAL7%g^F*O%3E7:ZFM8&eO8k8BL84IZp3m!<QZ%"0'Jd4;L6H==7iXKEnB<oX.ed0`lkA%TZRC.ro^KIBce_\R@PsU:.`+17t`$G`+$t`"15lch\)!W_mU"jFml"!>+44BdBDEiQPKl%A/N'^'\KsX4%4>6[kJ=dQU4X_3-;iD##"k$FNH\jq/?9#1GI`$:K9*iHPT-d5m[lp`)X-B^thVaS]-1cVcJGWX#<"dER^oF%2D7#%4V\[&6HF^k'3MK<pmsHm:.CQ96hTV>l9Z?m*&LCJDnXF4<]T$[Q6'I;'.7O;=VlMN@%XuWC<Q]?>f#F;U,(2K9ud^S;%Q\+Z_q?d%dqhOpi6A^>.JXlM3$e^H/&;qsgMSHfDk&W<2)&8d!-bbq0k;-V*)7YU.(Yep'gtf$P<ugAR$=Rc<'WDS5^(/l"IaC0X=$m4.LZ^I%cj`reNaCnL2)3t*7F/-[/cZK2W$5(sg1jus]`9`bXUHL'Jka47LEaG.E6oWqc^p@RQk-oU;ha/S[^S9m)L+50I"6Q*7Eoe=I?_E'%GX_SQY$k-5#=i`7..4BF-:R++.LhE3`UcimUeD*;EasPc*<81$Pf'*/_?eKQ'lt5!8uPGsBI\4_]dSAFO0H;:#sp1siO20[*\85K%CNII?P:2eW3[$O[R9Ke.I^l2M':p;63fKR0!eq(SF"eW8>G$0=J+aSbL_`6(o'JFP[jh4Vh:MnCaHS1)KhS&-8gtk%Z.n*fTYH4E%nX9dIIc]BOQRR)F2!]$X1,Gs<e;=ou<'Mn2=AGEW@TMKB`7<%i\>$H(IP?D)N$:'.Scup[2`"3FL\k!h$N%C]""K&=gTKt_o/[3M%l4#%6lIUNp[+L%fY,XDkQ_Bq?j@A"RO$5l(!.bHDW0C[Hpb/!uBpOMia^Zg'q>1O*A_5XHf"*=%NMY#;RK<5hK,pC[DGud;M).1_%4"-0TC^MIpcoDjbn_b,01PC6"mM,.#aAYrdE!b>i\$h4^d8S,$89(CY3cV3fEnK[LVfibiPaGOZ6Cka'Z)DbN-M?AD%[G$OC2(VV%i@Z;,Y8TJ;&0s!rHP3mK9N]9r00f`+G(@"J<m3dT)QVA#P3Hg)ZZ2JR06!@S<B3#OQBoBl;h%;+F[LG:J'"G=@7_Ztc#m<`Li;@!%d0R+Con.5!1mYubJ1P:D0Hc/m6SX[=R8a4pn;&#n%N,XM;R<\;h,B3-nu(W&OWpY[p(3s=CAQK8lU:8O+,YFR;j_]k1&G$X>;h$C%6u]S37;Q*0[=U"J1aN\uMR!XNA*>oN(X+!&"3`uLZeQqg2M#516&QqAV<2sITs@/mZ2h?lR00Yt9bHV[aJ-4I9dgEpF\1h.!"O70%Od[I9hVcr*gWX_0>W\.j,X3TX!3(KSc:Q0K*#usBmLGBW:@Xs$%U"B+]dtO]3hVRjj>#oNeF5>Al+AsNBb^&TS7,Q[JdeubWpW26%KJY.XW^btsaEl<!"_B$b,PC'KR\gWE4J/JS$AuV]bKL3A-ZrFL[M=0:=ZO4N#q'-dAtIP"Z6h,b!C%q!dp+djVbflhL[5:k,:4X/%N=:1>JXo4W$_fDZkUqKK5%):&L"Q`Mc#eWK-NL4JZic?9aJYY^Z]n.IRE=*:'I(7J-C^(k.\2=jJt97DaRsh8E,Jl/PI,Vl6h-U6%*d_Va]qI%`"H>AVGU2CPmeOlmT+451F(_M\nO,]6(>rXr(H;\HOF"']Q1+lCH)!]?#=rn<X_=$JWY?)q!h=>O'u\*`/Z.u_M_2I&%(18e_jl/Z=pblo[-KMXoEa&tY5IF:h`Mm?3]7=17R:kgqFZ";1gqa?B;YU!-$#HToE_Qk0_hT/MT`Eu/Nte2f.m'Q*b%AY0o9l`j%;Z2D_63#Fm,sJlLCM?mCM"tB%5%!?3amGV+HESjn18>-/:5b9)",m!WRQ9ZmeA+<g,%[srYMAc$VML#R:URc62#r.WOPRN09[FB+%c/=qnp=YGh-TnO\>+<PhI99#_.kf_lBok=eE7C<(Og$DATM3@#JuZ(Jf2"4iEF=O.K7nC%F%[.323e3\^(0sCJBlf8\&C=]`f$jQ%L:td%>F&^5*/j:&n]5LqU+(S,U3Q#IAg&a)nr9f":qVH[:t+*_HEWgo$)d![J!eIudmFC`\i0VL)`lL0[c+C.3B^&bf#;(LeM$:"%AL-#`^;N;H^o]NoWb`pPX'"W9Z<cVaAqu\5NV=mu[.Zf6]I_ZN`KcruHaf/!%U=UBW_e:4$Vj\LaG(CH/e5""*7'LQo.orV=G'pZ%q#!ZaBau(sl^Fikd;#99PZC\gWj%#kOD3&g2tp*B<(=\9hAB-cfO.,s@33V^3h&u+2BguDno)W12&OWdq^jE+AmMJ88.f.G<p.pg%E7i+h'9sI9$@`G@iTV=M=5dd<[@n!tE.CR@maisb0"\s[JLO'kV82=U:S/D?YfWop:'4/pQnZ^+b%@j]ZLW`bVGWTABc"e?c4eqT%;,(oo-rHOW$,loXh9!4(KflmK/R_-M6+U=5^nfmms,c7i#5]k^Q.Z]@0fSj!ROFH3S,/5^H8SY)@,=+Sj1Z?Wi]-CL;;m\QDR.2O%7Z2Np_N1<`.Rg?FRCg/3ehDNJFK*uR.l9b/*5T.&4\3-jVRM@Hg4!UcYRN*((rC$+L"DB"qR#+dU;iC>#.QIN3#db>oR6e8M#*RE%^$IKs'#hBt>T(IS9a.A\:_`#tZ)>N>\#aV+]>*!Z_+?!uFBN7]=MHC6(cO45Le*P"@krp]L7Vei<_s`CLfl"t>24uJYHcZq8N?1,%]U?+HP?GPG-;m?9#^p5ZYbX8,\S+RY0@9'-7M1%!VOj7%M,-2J.4!NtmSp^Sf--ai<ZeK's4Jch)0_[YoP'jI:'=h,:-2mYY\X;L%,\Ocrce62<ijs*jT5lG?X6Y?%%(-RL^9o#$IEY@V!n?l!<E3ZJS!q3bp>!e.G%tb11P4'p>NS`-PGXfmE>>DQIMuJOG`>/#?0"0;%FntTq2CaK?V359g/.O-jiCB?Q?s1:_Bt:,n;G$Z+n1'_h]K^M;0`FOK$[45oVM6??_Zp"A.rDa(foIL5H"6F15%a&_$[f!*PQill%U0nrGK6SACT8!CkC_/,-l?'M\%3-dL(eh2G/hs)0RR'%@mpW6=HhcU:F[7;E'"/Q=I*@Xf`R-EDpp2qfl,4]A?$YAVD)'oO)qcq>%B!*FbfU:"UEltZY/Esici](<+`.]V:-0ZY]etRJIqg]QoC]Yt0SDh"Vnd8&2Rt?B*L[i=J1f`Ga3j,Uq264UiV%#an9g$fk-Ap_4%WN#`2VJbM;08hMt>"0aQ(=`q<_Rc[*ZVqLpe43D"Rj\dVNp1kHDlRCZO8"0uU-;6c)`\W8$I=<qJsAGK#7HV8G@seIfas/LU&t7r%BO:Ij.a=hA80f0*U`P^b>U\P4Y*DE$NbG^[kMs%clRdiZ8WZ'=bTIVEetpR4=Lrbs?ODf?14RC2!l5IP,0YQ30]1.??^=hcA@<ja%<4.M3kuhgkX"?sOWX:Wm&3ApRr&Te.^%$iVZ#T/=A*0g=$0Nb-IMCYTho2/i].[]>H?mQQiWQ>f0S8C6RYWl-:1+2S>A&Uc,"ttl%9qIS(\skg]VWSR5g;)VV=nfFabbdo@JJP]rXW)W6+pOCNU!po$2iI_'W^sIJgK'&bjpm5S?2%&A>cq-.+h-$B]XG@N7YtcXjM722%?'69X!k"%rYUs=15R*(\6/VN+PcWAcOsk2R^E_9H;<'ErJoI_!5QherDROH2d^Y\`>r:c;:1ccEU,C*9g7`MNYV8A0IV:esq);<[%DFWe?jW#=b]*7,"<\Tt6LmKg<2E.2WD0e'PE<,)g>m(&h7&'O#fXpFmcndP4M<3D+oRBf-=?%Fq&5uc+7S\-73=\XU'!QuuNf+F1%aQ#id=@,ua&G(aS;TPA;:Yos&<"HJXI>PocWM\R7,8ep)`Z@D^/\bKnXWQ7.V!shq];+bR;I=10I9>rMoY4[N5cYs9`>9-@1q4L&%STSl5a+gL_/9FbB%&;E4Gb^L;4OYRKOfa3=a;JPmQ'_")5XIPuAW2EhadE3%(2pIl?d$]_*Rc'd&r"-p@<!ZiZV3E"\+a9BiGNOg%,tZBA]"fQr8ToR,:M0S'=:a2@)8Q_^#,nL=3h"^oc#>UGIp!_@p_pY'Q`0msn"Kf"=kR0j-,dG!$IVS!@t#<Xm_iE-O^%dG0U/[D%a)(=^3$,Gd-JET/SnVli"2'kcI_.5cWGkqOR)H,m80LSH:#!@oRCeC@kAG2C*(g&Pc$)SlH5WN7#Sb(V@+sS9ilkrnA2?[H''n_u%Eh=]A_)9/gQb4jg]I<)QI=b#X0FJ["+t)Z4q/odZ0u8.4=c$,i-"'(gkjVeAp*cW"Gh6=--sB"N<0G(+n`&u?@[lB_Q;ruQ$RiCb%pI2`Z#qXc.jPT@\KQ4c]]2Jjh'XGu^Sg%?DoJj]`XeOqSU&E?CQ-jb'k'J_QW=[ur\PG$BXb_]<8AoID1=&AgTk\-Q[^.NnJ<9j_%?JF=:lEPf88[[nr@"L4ueHof903@#(lf\J66[=LL(FMD4ETO%>kI6>*=a\pHgQmO2@t+U,C8R3jP:ALP:/Qk'&DE8bL&td8,[9^.%;jHFXcVIK]_*euV,d?<e.Qf](&Q;a+o0;U.&WCaBKXos=VR2,T5>6*M&q)P"_a!/V;&!`).-o0pMhd@uP[aC1Qlb6Pr<0(L&72"L%=*&UhljWXB-?n'>p99p3G_e,`)"^^[39/o:hp"/VMAj4,3lWlf'\4$M5!K$-:V%1?"]CSi&CX-5X0,+T5!,nchIiaXg#;I#"3cn`%dS:[C.V=Y^g29o:e%D;-*N7O_*Dd8.J"!BlpWcV*@_leNU1dJs&'cO0X1EXeb*hlp:J][,hj]L2>PX'n$A?"f]G4PZ>";DK4e`^G%Ur3o`Pf4C(l'[4@C)'\u723iG<PordYrk)TK@R239rX4r-J%^1OT"SL"+f9VG"V*lL3d7+#AHk?j#3d;EHaq-8@(A8&5O#f6]0=9%;*Bm9BponQ!IoOGH)CG!V%KRn/M.jQj9o%(5K0[jR@_a>GHG9%N)d4PY:KECaX&hR_PFCt8QfDe6/kk,36)*1I,=7m72RD)G`+U_%i0=<T;j;+\o3KCIQ8Pq5OB21(?o':ci]8G6?QsdNa[tFrid9s6*SNo=34DQN\(P1"NkV<>'7u(!3d`l=I[UdZ6jrpf:.<J2>I9,/%4cD`\'sD2I*$Oq6QSB*Jr-K6Bpl]H'-0_J\^cW!/5EjO3=j][i8n=hp-!8ht.,_\L7"!*\P,j\&!B11U_lBb_''(A)?EAlK3,M[)%6q!1\pclD$Of:VZ>1/IJ40t)91GJL0"/:j<6BK"$a_->49BNK*J+IR&:Xca0Gk;aME>"ROPg/JQ[@F/-D2OgZo?rgFkoE"97JK*L%XBTi1:UO)GGr*QoFL=#cZl=+Y:ok<HWFX17'q-CN)b1REb,Ppg:_R6KhB4/Q42;W)!BnKiQo$j4l%lflljqd#he!Tl=;.jI;WfV\%RW85#G7`*-6*D(k64gdh\V%Lgs#S8Zhih2hSaHs*#uimp;Bq[bIT+2(07t?36pI7p&-$mK.uuL*?<g_4U(u3`[-qF1%e44bRhpiP%Q[g@t4.Nj)+XSq)M5N/?VeT-sYDNYj6ISUo.7N5VTLl1^cY2jgkDN6EBSU6KjRW8Lj7sl_YLcER?r\g=CeXS(m*D7[VDGe_#-i-`%^HAS^pL_r[Rcqq4%C1(W.5i"Ie>uNuF::YF>"*L/j/o?ZZ?n@dM)#S4Ei>b,%;1j$OtVe/!`]]DL"H)so$Oq&-j3@e1gj]OMR?/C%X.D(O2tFaK^:Tcio_HPSIfI$@)CN*Raq4deWt0ET,;s`egEZo:ZG40Hj!bXBLdGo?J.)F<:n*,4]>_I:T^F)oUXO-(c]#BaR&)(Z%HYQ94B:`oHbp:ITQ%u86F[k(7FT5hR>r49DnX3&N^Q%\oQ7qjlbS4+kq&HA&8/i_]J:ec3P3nuOB3qAFj9BBuF5=UM,7#r"aneqc%5,/1:KF016aGJ=k8>=O`9ZL+rm0qhbYh(.S_JGSB$l:4.\2W&B_8QPs_RNOU<=<7Q0M[c4"Ab]R0Q6+L>+<_G.Q#ZO[;8r@BpJp_%g_o/UWq/OeJ9AE:<l)7iTIfn82@c9\^n3#d;hZS,2B,I,TqrE^PVjKAYWE?8$;PSs&N';Q-<FY'V%lQnff%9=o,,8kLHq=Y,FPuc%)ro1$IleASV#\rq[u:*ZgRi6[rAG&trm`L)2U$=g%`"<R":aGH%1oINi4;>udr\V=,G<Jq,oB+TUaFK?H^H)#,39>3+&r^snAZ"V%O@u0FTMt^RQEQ65o]YrdMFX7j]I`Xj)InRl\9lmFq,7A>X$1o+YbsS+/Y?iMD8]R,"g1b#Mau-.J<H%3_cSP@9Y3`bf_3rHI7(cB%VMed]$;^!p1,9:J-<]aVZ62,e\DtP4@GB/6N'Y6;32o_S_e&faj39DfBS[B,NJrs6$,\HF#eprX:E,%E!JlC1+R0&bJNl1F6n-;L%QjTo>%)YW5=K)ZJBKUI=hBuH?;+FhE$:'H#ZM$qe-P6<p+]D*q2B3OM;[W2/E*r$R7KL4j\->KlE32;nGr*^s6=K<?#/t&bQHe'7%FWH'bD&pn)l=RrtnRa4ZG,A2IK9%.$7c!W2moXaD)0-0E1Y`t_a-3;A\Poh0s#<&Y=s<3`S.,$7I/6BmO0En9>?")#FVqX,0YghI%jk?/R+4"BPbk&4Z=Ad&-,f&Lm*aZKuFA^k8R?"<8e`*;eKns9=<.4Rc*e=]^EgWc1Mg1."!tn(Z;F7V"];#I7J(iNMJJa$%W`T@9%d1K?V8%OtS_!I&&jFddbN+'La8@?>75na&TbaWmlf)2O<+dC^E5AsKG,OefjV2W6M*[`f#ZRd9mGTpE%jkYms=AB-!]7I6V$E8Y5%*35AuoFdU\PV8ZonHhoL/>XO[F=men?0JXUfShQWXsF.9FboY]D2^F.Hn">\,s?q@."XCIL;?(0oA$(;:;)VOmX9"3Xn\W*ep/UC%<akSR^8OfBK/PEaEm6i[7jgY(qjF]^(;nR42GL?_f5!^"^fZC$0FE]25Lc6'Na[IEP"/H5chJLBAY$T_mkP<1JbZWn`jE0B]-%>6%fhc%Tc,8(8IHI)5gpQe;D.V:7);H_!Q\7*E@cS,+KFIBQ)7`c]YsDt4])c>&P#U8+69(i4#`)2($,nl3+,"A\'FZ)D]\2I`V69+<%BFC@K_FaCWQVI_=7mZ34![fZ(g]d*c4jOhu%CQf?/AZa'*It#f"t,P9(Fn)][dE/bPsU5pWfTnACk+?dSL.fO&e:t.G2m4idSMY,%8ms=Y!b<BtpL2q&o<f^m<6>E=n9,!ESh%uG8/LqN:$Y,)2$BER.p)`Ehn;[Nk*s5]IJ3aHI=pee`[9L]HW:.A4B$nC[Rmk8$aIOp%N3(a+V+@mdfqtd&XA,.cjc3q!Cd96Z@:>t>Stl3?1PJQH\fQkiVaYpm6^CP;YR]!?/Ue"r+7rM0n$W^+G7^c!4_<q59i8NS.PF-a%O-agkSj<J'Sm`W\acS]Z3*%W2UCN,nEO/XK9sK$6s$SXg8Kr69O!>qB2U9'4(L`_Y9/H4HO;j$L\ZYgc;/3fS/bXOUJOW*7>PpT^%eHP58l=d1Y_4c(,FE/tUH'+Cne[umt1W1#"d0^OWR!"'\\1Vb@,J2@"?Gnsk5Jrs6`W:*\Gb:o[;@W7Qc<GPdAI>=rPCi@U@H9:$%+\L_CD@q.[O&-"e@f-h3GB*mt="?a2bi;Kb&>?j0;2_b8fJ-k%dM&A(!8XA*0o*Peq^o'g'RsOkqP[A[V!%C[rmIh=%<,JD5*e2o%aub@`G+?b06Uul;?9]@NhFh4u-`6q)k&5LsnWlK<.UN>A\hG6f4<)pbEnn`Q_-CCr5;,;_[9AOGie+[h\#d0p*3JT5iFJZE9OYap%&d>Khd1DhgX@QsbKrHE2[p$ePl'q:%=We[bATbH-<T.&!I1O0mM(4@FMC4#5NO<$QkVBQ,4SJ+r'?jkdrWSBe22P%M<uJ;F%(Vig%eNFfBW>Rs$?:dbZDKQ(E%""J(0Cr/nGqINn,'65!S0b'W9I#i+0UBZFAMN-%kOojXNNBfF9B^g3l-n]so"7IL<-0'#U=Wk>7Q<.p%E,3%:8IL'<,YKq6\gED;Ad-?s:aGB0S7a]?QCH<3N2t14)rFoVqFIW:eE&a8Qk([Z(Ej#;F$m[-YrPE_G81fsSC+aP6uu;_:4Z%Z%&]rM'\*<ZC0?1\eZViqt`cMdiL?V5Y0(FH\hA0rIaMq#4^ZK3+_d]r;/CTpc$ViMGP>o*i8h.tEfMG8*_1cOF^.%>/b?sC?oKpn@%6C_R76;VDT>Z_P>0"V&iJlsfQr1b9o;KaOWEAg*UU73E=q%'*06Ps,f(0Bg'?sK@n_\J34R8miT;Bd#i7:A8%)FBh/3T?'Ef_.3N%Ile`R/WLIh/gmGDc\=h:D_X3C:u[`]_3bi&7B+Y.Bl"=bC^=/H9[;'m;:;lYS)DD]`\l',a]&X&TKO`j#eE(p;X!ZS2?quqP!fj\%Z!jaHb!u\qVQ;hjWZ*qXRosV@PJa,?WtO`i$F0u",D@Y[dbQLQihobld*_("$_80j'KC.'DqpX_Ln:MADkNCLo7,;09ua/Xa(.Rh%b>KsA3n7]*"?$7[)NmAD%e,,_D;'uh8%ah^Kt=%;/!=m3ZUFCM)5j<8/*SRb63HR@66"nUocYb6(XgE8Al)n_`r\oD0FIqWCkUBO%:9OZYq5XfWQu(_U]Gd4]8Y2&]E*jg'J4Qm_Q*>PN8N,tHG.."l?*X2;VBhU7o:L3>c,\^:3g*rs0F["XpLI*/[9;(RWq_5\*-WL[%-L>3oCmj=WRKAOJX-LS#:*N>VKGBNHdk,pK^i4D4PB;rq8M]Kn!O`)##O*F_n(0TkCG&2OkBK3KZL<Q;8?k7gcLZ%i7AUlo2<8Fe%FDQejr^5!COoUNT:1%04+#'V0bsK%'9:DG"@HC`*s'(I9CA%\#B"cI.QW[)=$<-M0_$\(e0m-577p`<'!=UMF6^PZ1hW#=-)5^PT%K%7BNdnEHfK.0u/$'DWlo8COc;G*Wbrt[Ri[RjLC4Af/g<JP&>>a.]#f`O#G#oAI^VE:=*2sdue3q*Bnh$qnL5Fr>X"eqep[5D'_%!]13c130C=?LW_f$b+J`WfnfIPc@kUV$hH*lYSPo9WA^E?$Ou*-cjcQ\cS^W$4g:*h3hd8k2=)0>c7:3YlCG#nppL*?-1(QrC$03%e`P!3rJM[sFlXr$]&\Y9;V7KJ1(8Ia(t,"]A!af_dlP%eJE7KO>'i$9:kS,Y.PAY?le_RPgBV(WGW!m$Eh\@KXVN]*H>:K"0H6$^%WQY#-Z<>&srS,f"\&nD#Ko63<>XUuYjrBSYD-+Y_)Aj)$k4<W9[;n/tFOgZ[Z$B=n%uFjd7A4g+!F6I(FpE9F)gqfhK]%:<XJ`;M%(?^f-U]`%R]N?eNG+:KHn&$c6HJh"]3BA=#I3r@6EG,-f2:DI74]?nl8&2S:kcFK9W%Q/^<0`@*irYo!5j.Agm-5u88=[ZJ['qL[%.W^Q\$6'S5]jcC8!OA0iE,[]ml+P4?bf2_?6/+OE9&)&@Rc=rk['k+k'l/CX2k7q**SM(K&+I:RC_K&`5DU*5cgGpkELNn>U'I$`%D^G0\m==SpAg5TTTCGtrG$]bmZl3B5fcZD![eNsF><3e\JikKb!G;%k=<e6B@?_(/Qlp%AZ6kDP5)jk]'n)LJVVrn@*!Y+]S`&G3%/38<[Y>?&APAC`\7.&"!b]@n40=]Mg<8;69%)@K-=9W#gE]kGepB'Bjc8+R-1$qUM!F)iQl8?V%>,_iooOmTt^I26C%'iAnYM#Q-%q+rhTCV?I^9C#ARVuG%!.a".oRorGDWCRMTrSmJ.37h`npmVGW)8f/9&+[S"D0qb906?1K%Ch["<KA1M,&f?ILtp'\q[SA,6nB\L%pmrN>=&k\,;c(<Llo1]]Z"(S-M^p2Ne7&Rklj0-C`It@\qBBR_hu\W\("c+#I7tFK(#_hR8_b\)m?r-9<Jdn;p_=5*9JsD8g+uWl%J>:8,eb-^WD%Zu>M+:4ar,=J8$l$l1E;o*PB:YPgZehS>CG;cHnl[P'SdhFG0cNIb'K9'6nq;cs(T]%31t<_&2QfZsPbZC02s_Af%-r\qU[M*-am"f+u'W8;G>#<ubMb]C\oq`4_nM1Z#D-/G)/m#aT;ZUlZV^4P??_*.t;X%_Kcbu$`,69,\s&q#604aF:(jP:kfb^n/%o#OstbXMr0l9Z1$,F@k2rA=80]7?Gk&r?Bu[rhtg,Re=O5Mr2h1>?s8(S?-Vgmbk+UH&Rn&Q.`7%bVD/^1UptYaG@f[QWr8,N(cT%if7pH+I#A:)I=0X!_u*6aX2*>CFD<ao4b&J2^^U&7.=a`^:Y`jn:UhaK9-0F<->qhU6T;)B3^J@I`-pHo%0l'iMu8V#]F<]*esXZ%=p+`P6'9pRD]^\KCfnMQA6j/IQU@Ma&YVe$RLaC6`),HFpDJ*>)IKg=<5@^gq>*KVYRn!)>i/!H&,akY!X9F@^9e%"R>6l-bS9[g%D%`trbI:F$H/rnk2^bGI97X1Rm-&^k$=t($S?Git*]>foZ`1i_SG\!ZPq3saXBti><=0gK]d9]X6>l4nmQe)NW(a.qi1e(b,pU#'%0VghoeN3X3[F*!&72SoViWl?bOnc^i<b96u-g9JD:c"63f,C`IR7.BMUX\AmBHU$f80N8tC_j>S9*s\n>rcOB]/a22JYrANrC=(g%>I"fb,]`3HeHfTH&-,#sK]%]11$L+K"2k^Um:ln9-5I.W0ZCE4OucBu2uuSQ)j3H7_mA&tW!WiA"i=3MV;/<D2`%[C9@*-URa_Qu%%.d\/\J3eL`DOGH11eXjXb(.;Gpu]UTN0^&6::o^e-V24KPU^79[#%2$DL+('\S&%c]BZT9Y3>`QF0q2LSKSn4##*K*LJ\LeoQ'3%Sd7G5%)._adqh)!Neug9@_\f]$mHQ9\6Y!V^h+,Q]51.I$kib?8G-,sQ-"&[=s;Oe5"W3J'm#s5fG$2".)4Dq85B4"-1Dierf9aD%[Y$q4fg-"=$.V#SRGD/"I#dBb%(8`N;27Z5dP`5J(Fm-i[k)*JTi.L/c,/Q=W(M1nIjW$QG63;#$l:OPi=N20Y+I_1R["33(?-'7%F\G&i*@F@os7O'd$(QI.$&D@E/c&EqX+5h1o)sCZc)6uiXg9*lB2mEX6_W`EJ;PUsDHa&l\Upgag^#T+c\I[:dG]%[$$iI!=h0?"%gU_7;+(R].dh["cTNiX\J@VNEP@,K0!GhrCJ%aMDll)WS0rV=q3Rb)VpDD4H$!U[9";oWb.T'nfA0H8r4!_$bb=2%`bXLlM&*JGl%6S9PeU`ufrG@f"D@])o8"O"skKUS:4C`6uOn..pL*YY2L%i-SQJKf8fA9(AC&qN6O&FQ=h1eVRkEkoI9Co<"d8/&nJ;n,s[Q]#:+%<QNQ?(634lpS`]"JDpZ[rUbe\(.]!X)#uB*\kS)D(3+MJQj_S.)M.-")o8eAX=to):9]Eu7_>uNO5YJTSO>`'HIP-#&7D"Xl2ffX%#'ed`>^I)R(EHA/Hpje4h?3aoQpd*(UEDA8id"ik6uZiE`a0!Ci'-F:]\pFtf?)L80!c.UUm5HnUA;B#k+.#'X:\mhqf"aD$<k^f%_#G+_K(XRAs39D33gHICP0r8<k/jM5SGN==4Z*eVS)(Af0"3R[b2X)+kdioi(V$\?<"99<%jhq4j`XCP9d`q!a9(QWWnC"Gh?5*b%Z$_pmS*II"jtA&gV?0`PIYa>G15,hd`Ea[I4>PYcgW9UL(^VQFmV;+[R:88J(nL>AJ!u<.A7l<YeI7(1!L]+hIoo`o9LL;'DiZY9%b)$.@:HX5h&srg\j't'@VSB"tZ4P5tp6E(<$\8$h)5l,81qJP[V"]Tn5Z@-e%s_5S[:t6'DhTmoNm"6Y3(pV-FWqCU8Pu9^Ri*2S%A2h=hd(qj\i.,>="t>)1;Wh?HAQ\cDn3;ZuBsMG&O#2`mR==Fkgft%WkIY;C\969U-*NX])1A&-XMLJPB]H&=&:C?7r.c/b=j=AY%6r%H9ROm-uBdYe.5/ET<"D0(Ymd.a7HE5-CRsI*)_0%o/",suheHAtXYTedJfICj>+(P=-+Z,G_`^-lr:Ft>X_t4IF(%ossMJ[q'%-mg]9Sa(?/<j&K<C)Ch@f6W0Ja>caXQas@t"I`miP"ENNUk:4'2G"t%D,t2jmrjaA7nNL3kn'WuQP=8oAW,deD$H_"A7N5I"4O)0%#6/DkAgl;co)pJ_:Bq<l8p6,1(K8HV17+!UN79C(o>;0CX@Q=bdY<EK!5[M=-am),MnL_Md\J5g)BraiSbo5"m^S*1>Aem,s.&S.%bc:[^):cDJ1+KJ"Ss<!1Ld\YLJLoPE-qa6TWm$l$kh-qiTX']aakk85f?'@1RTOfDiRert"lQ^2]qC>40HWHHYishqGhZ2HSECf<%C,Ns'?rtg4]5E9D%]=Ol3"^e5]!P=,1tc?UQ[*CCin1?r+q`oA7ek2EX45$b[R@!jD`">;CD-W-.288caT_5Q5aS^3SBGa(oM2pg%R)-V^+Mi&;*DRUPQmBESVP=:;]-T\d\+C?!75+/9,[.O[]H7u:BnRh]$\@kjHDV$/)Hi-$%o!#`532BB!ZsrI+_@f]-C`8"Yj9CD%^-`R]YC$S\>^%VS2ru?O\>J.RnR8;k.qBr9HLK_6Cj/5$7#oi-f5ZU[/DI[b$NpP?'Z/eqZTb!P(<!ha>02!RpgH+Pd<s6G,/KmB%RK`a9Ebjl3:O7+(mn"ruHV`-O@$U2g#=*/+>'ggeG`:b5,YJs3&Ti*K,[XJY<4:oI0*9:I/6\tDY0s?b9Qr3!983%XpX2p_30s_&%)$Vas$Q@SJEfXuQ4<L(lEaua7OebM=\HOT3PTot].<]bKDRYj]*eX8F_;ag-[KsE[5d15F@=&cR,e91;gBS[8&_UCQ=5bh<EiJ=,%f]$Wni>LlDPl.,iRFlkZ>j`e+4]Ya$_W_KiRAsg#A-*fNEh:q50q$h"MY^`L:=4[&OaNBrBf\kc'9KR&gia^.^Y,IWlrk<:Ub&7V%,<)3rHAR;<qJ!E6Sa,"IE6$)1'NN*G%#c]PD+^T+a+Cf\nPM]W)Z:<G9t8L`5%,j=c%M\le9qbfe&4jWs!r8:a:3bjXX\*Y9#7;<%%`3?%dBfC"*;;rGf#ZjF@bDB_Wes!I]96UDLeL)-h\q2)+]=.0jo*85F2ZNm5V=R4$8eYWYmL[<7S`T,5K<7k;PhKj_qEo%4?6B6%K5.GYp;u=0bQ&j2/m(js1?Ij<pFLN'.5r&j9?t-"IL049*tcCE68AEA]Tn*s&PNU^7qsV+gJ!GMnh)8]e>c?X&*;9)8eVsN8^VMC%\jca@6(F66q,&hb=(Uk0HmtbjS_UZ<V/.,76-(J$Pt$fqi@4l&PMU!_ANGejj$lTkl.N^c!F0KpI>8(APcPGF.9d:D`*u6kqbTIN%Vc76(Z]B63J8@s5R.DVg!Ot5l:tuDJOC@$A?=gHN6*66;%._YO&b63c)QI*^K@LMl$QEa?&TMDl8LHY_NsW*G4qU-lM^C+m27W#Y%^jD-9I%!^-l=8*$:]791&Vk@L$@?LpZIcrkE!)>GK[<p[5NmeAj;28t(&!.gfM%3(K`7/=Li3G*"sq&9EGVF_jU)\:`bb]T,AWeM%'^#b]fV2n;$7(.l4N?r#/u@"$aCZW[!Q;+PK$KF."82@!esW>B8O5kC1ng;F19%3+&,-:'rbk&!B)+pV&#>Zd5%H)4MocRXUE4p8%IB;s3c_M2IDDp*_0)50lI%!I&8jM@$DaA'7fU;XpP;2+Od[-EPj<OZ"Yr:qe)S%Aa(5eU9M^cE@lA7(P]/H]02$So#U63XL7pJ(i%Ih0<YIb4)"V'*$.Dp2C\h>$O7OaNTb.HX$j="gVd%4T65Gb0[GFQIL*%Y6mEEkeA[_T!:AFHGlHrPVTNYT<k(6]DFX0?;;80>%(J%+s.AWg&t[ji\H'qgKn5QO[0SZd8^F:o_V`Sc&!-AFBk_!J9^%^parTUKk<8_$4MVt^i&l\=`RB0:#uDE3G\c]TIa'QE?H%Yl9XJ4%/9P!M]pQ&Ml.Jre$h/7:"K<$SYb$OKnTcT@H5k#)q2OBCj\ea//ARQ/L_:h[lA2'Y+@t7dX@OeLkd=IX>Cs^gMMm!;+J:+i>7#3X%OLbUJI!TBD("Em7?tlIk!(08Q$m8];f,Y<$Z>>6A.E9TP=T1?!iT<oUDh6"Z-:pj.!d1PS;TY`6BsY<Xfl7IL@h>Cm"t0c6MAp)#%RonH`U3m;fcTkmF,t;-:\gT"H5Tq12:f&4ESF\0MP^Fb87B6,@ODEq2pVVR/,YRLBXiM2kQ\NiC.\SR0b0&o0<-<I00a3%R_rX5e%"o+37`%[G70/'.Gq][n>&c2_LA&-'CpbAqIDHo6[A:HuZC%9Ard`'TCdEUoRo)R2\@&(E"^aHNUU-L9?=&Fi]Otn;R5JLogOq"F)%;j7;\Lb0>("lBFae_MmY[dFjT2Q!@T^bZ[mM5?Y9b?SN;8`0?TAmb/YSJT9%9U9mR1,_uXSZjhtBM0s*R5>TQGISUe26XcQIn%t!%441rE<cV2%.uQQ]e:_Eg/s9rFrjAQ]nO'WU)AG`lYUmPc!4@\."UNdiRm>sbE&#nk/_3#!7mJo;];fJh"V^212+-;k=1^lHOl8aH%)DjQ-c,YH^2,c4>!A'O6Qo%J[ojq+,MYt"2Wjb2L7heCC$o&leI;/\H>Hu#L![e^L,!ib(Pf&,'+iu"S6ON;n:mOXiULa]"TVE@8%j[`'$:SKNO9YiQNi*>ieTQfCbI:[]G<3oH$9Wsr6FAER(l,mEX-$]iYTVbq@X-QD9Sj"GT</]\-UFPO><1kn<m(@\QR-s$eC2OKQ%B1oKcVY0_.M\>r9eSdm/GU?5SBg*K5l0O#[JdNo'!M8VM3u&6I687r8).uO:%[C)A`&*=nZO=?)Z'_`gnS28#@f!ZNcn>"4MIb2*%)O_1f0@`4KS',l:#^W`sfo`DT'cH4JUbB!cTG29*=oj-[fKU)+P%:_0,9jA5QTP=)]>PZ_2i;Z7b)r;pm<D'%OetgkA"I3,O/\&j%4W0%6W1[c!&60:prO1Qj'cNoj(?#6ODY^4j/;4@Ye!qtRr6"<gAePZ;&"-_^Bmfg>(S$cDeL6;2SdWh'8]HMJ9jl)JmLWjb(1,9]%T^r/eP4-N:=U[WNQW-EO0bAS,YpTH$=&;rc4;Td`S\Gh&'ejH=/ti[Mi"XG\Pk-pfZs6WLdV)dr=;o-V@q9\W:k\'XW2kIX!:jHK%:+qf]D`/skl.t@PUm\b1)$$9LEAXtVi+'S)`'ok%81YR*dBm8ZR?lpW(T3%L8Ud(g1JpNYlX^ilT/p#/#/j*I'XT)Mhq"GFNtnhE%.9t"+r>?Z4\<a'G=R=8uF]taN]\2U[BuW'+Wi<UfZLOsLq>p(]W2t8[5G6F`cLn2J$3asZWc#rJ(/m+&RWc8!,gGX;4Ws<O8#EgT%X6Tf9BpS4@A34fPF/uHK?0[*c-)t`g"^rYLbLW^T.:ihgW48\(?F@CV_r@Jm(qe<XC@2M?RD>NTn3Hdddg[+VM]>q%hcS["N]64(%ik,nXI2@es4/28M<7K[C\]J$tHQ.T%<8bV\4Co*\:`0>,Wr<]odQHJd<O*%t'm)^X]4)ZoXe*&TEM#.!4TqX;j2CZ7XnuoNJa5U_%MYh1k"2?/8I%ud/8$!I?k,YFoJeJmD!E@f2rutZf2D8fcXK_#5fNIaD0pP[?b8MD@1%4%/FAp[q6LjV&DW@NS<_Y)lT;b'7h!M8J%-Nt=&M2OgQ9s`KIaVS[E8Ql0T&g2W/iLoTP$)]9;?7$gOjHDiGc^^Tr:sIaK\tsZi))n=0#UhF?'GLsPVF2skDK=3FKNM8X.X2LZ%K+`-#RGp5o=Jg%4WO=pBLu@*p<8n(3%H#csXp=_>f)XM-nMc"#N=p2dpCQZ<aE>R&H^`s.Mphm!l&c]o\)H:]W-AE_K9=@Ho.f-e%j1[q'E"N2BM$Ok&)4\1#,j]WfR;.>n1]F1u444@ml(WD9ZN^A5l.dG*):n?QE=6&KiEa;0C;@!a4cL5s7$eIpP>K9>-nPEFi;"Y?%Irk)b6PR_7'c*9aZZ&Q@(M&>-)cTkZO,Tq)Vu#gH']IkJK`DuZTbAn&35L0N17KDK_;1XMESoaml\:"d&U-mDN0R'*0u.!=(Y^p<%=g<^kR3AuVN/uq^cf'X^(aj2uqXKmMkr2tS50MqZcYlD3_D'Jp(r$r]J(W")0FIHh1\u3d?]AFsLbn>Q".Yl0'M;Oj]%fc@3(XFS%*8*/^#BLZ8Uam%m:'6*)nB;#BYVQjMP^oPa#S7oCinaZr7\^3;daD_S[Fiu2L'nOuVk?+>L=q#).mp1V=J0q^Kk^&c,+??/Yd`?H%B-MPeVNa%4+QAl>!DYY\d^I?bB@Mmg&bq$YLm3cp+(uIaA!AN.McSG;'gVCcX;[#%PR_G#Zu\BKH#HU5>1]dsBa`-d6Gf]oru-QO%nA]o[$F*'DP>"@8GV+M@*#dBX]Q$QP((n^32\9$6SFd;r&?'dDEZcW^PhnY`9Y6<e>9Hpt66=ki_;-e>gb:lU:X#hefAm[1e07)/%b%u.(QdL*ppT8O<WDq[$_9"=[AZFI.('r+>bCmJ5.sjkTKF1ABm30rX%uTtu,'%f/`gfCR_ff]Iimo.bHqD$YQZuM>Y<M?$hkM_c%3Rn)n5K5R;GT:_VhP0_!4>FW_gEh(-@)n;^\?.h==)$Z"<0LO(i5SUPnS[CTr>?sZOPF67]L[Qo%paQRBd=H3ZSZUrTe*cUgtPL6%@C]2W3Eqh[2t8-T[%pR;O):$?nG6d-7&i!S$qbHsFh5X0pnr'a1Bg:2:e]D>^`3N8e6R#e9DK4eW@7$&H$%HWa[7><RN/P*5XgjB%-'o.A;eHs@<(rC5<5SDY)GLZZWS2A?_qRCm1b4HU\]PG;"tLh^pj,OniG_-<+"bj[ff7d3nEc9q>*_/*eTIu@OVCL.FG=0<0,`Xf%:aAN`D_7rEL8H`VMk+t-Z%eE!;CrRkK@./:[8]^i97M*@9SeWSo2(X/',/;J;LB.N3KM.+(,\_enGe4Yn5$eJjhk%KO+FKFdMu[)%Uf85i-Qi85.nlc?d8.<.kRd8EQ7[)1G97:h(_Jb6X'!&#ec=Xr2+&atWo&7W[?tW`6f>LdIT``]U7c[qFOMmq3MU,a-)jtX)Xj3<%:,4(S+fY!\NXP989T_Y*^s0kqeaMHDG?GfN*f;i7ZlP#p)99$e)odAVrUmeH@Q[W@QgqOW_aR!9L=_T6@ljYf-uOh;:WcfMk4eb/%^$mcb%tfbdP@=.]2rB,4L5XE9i9RWh&sbQn[%*.gblI_3^eOakm8'XmR[k$p*#Db;&2$]1U[4`]M"_&40F8!X3PiD^X<C[t.pJu6%e=Ub>BX^W5$u:J$0(ZGa^JheML3+?jj"qC8`7(]C5A"8*G@Amf?l]#BG,\l'MI;\N.P/Orho4DUb"5<KWT#lac.uit8:5(!"`$q(%&]p;<i8UXGT+2GsOYn;G;GHem!9jA:3PS(?+p<5b.3^aGBEaS*&l=H3AW?eb3;Uk&d\<n+:#s^%F'2'e!a;$)8kae9Rra:d=`ol&%ZV`'-,mL&Z,od*E`:-Q%L'_<>(S[8'_-/!=Ro47!KVAGD5+q5Ko(m-RNk2bu$(^;p@:g2SX<E"B@1pG"7=s4O&mNkR9iPtHR+te<%/]CS?b"]fQ_uA\cMcD`VO]ZCVaU%f,n5oIK7GMiNa$Y"TA<Ns!e><QrBs(+/O-]3hFf)3]331I[<N050'-ZS]K6A:F;5+LAFugKW%Q*A*AJ[C`J)Jl#%XMtdQX6tM<.][UY\1<Ff^eN#+WT5^ODDr[k8GV!BJ(-#sjpCKM5;89Jb^VEfmI@fKa/^V,2S'`#l3DL"\i7c?%&84k(ZT=Aeh_P?c`o0d[,&'VEF[*2&Cdqm6++$4`F`,%)AKn-FOega,aQ)n,T0AY#E#kZO/Jk`Xg>.\[I`Al'>?t="aVhFZK$0Ae%*)73d@W9kmraO-t-&!HX7WDcZV-ubL4H_ZtP$7>D(+;McSXERo@[TI.&*O6E#N%W<`sl'O_?b;9BKBS`mk]!$bFtE/O'C'f2eH]]%:#9r'DNj'=:)hJ_`OF9*qVC*B+V+kL.\6Df`s,Xk*;+gX.:Sn$+[eKiXm1<>FqtHA>I>>*YWKE^E3Q+IJ94MSne9[_gmh4"2)uq&%1F&ZH_jWEec!:4W>cH;3eXT`,YZ!4jk21)g[-r]_R2&6[*#UA&%t4NC0ZY%nFcjA*o"(4#!ihXKj"%p_8)-Uj&KG]HfB-'4;U1;Q%Vq#q-%W1*D9h^9tr&15RIMX:9^!Yhc,1L(<U&3eiEcJ4W2@)>aB[BnkZ3@okqRfrkZ:o`"X;iu7kA2TULmN<ECUjoA]AI*G/D_Y2%#M_,.%)<fNeX8?8?(kJG*73b6Yg[CP@H<H"RbEc:#eG:aC`?S`N2bp4)uN0"mpSH>RCr3:&NeDESC_E71(Rh<RB0_!HV3J;E^TTO%)6g-t&c]\S(o23CZ\Y-O#62KkHGc,^YnT)8;Dk=Xk"?"s%)2t1!tbdUSC+@)j54`H@l)k:8]o1->I"rI^a$iM#@U&'"neCgHMbYg%[DoIT]m4_iGAI-4GWk\eBoW#D0$CQjGVtU&![M/3+B)dFQ`-3/>&3?!d<RY.!2o`+a#:[9L^%I&ehnB<3jJ(cMmW_4#I5LY4)HsR%IoA;^jS68e26d/7D(QV,KX^$->%2sXAUU0*F49JbUL1,-a`0dn3d:k#)osn4!a"ru`&Jr"Lub2bgj4%>#`cOgMe:J8G8^N,fG=+/%8PSq?)tm7N8@r`=ZGlJG#7<`>hdpNpKG:35^WVkC'[e(8rt3ODmUWY(rA*<k\h&84kfd-CPc$aUf=Uf7Q'$2+)9cH9?%S3SA&6h#%(WJEk.,\^p!l*1(m1rmg-^:k;q]([L.9EU=L_NZ?jAplK`EtqB"Hd7Bln)1+`6=Ue/VCpn%M+0gQ+GSJW+_QSm@n*MMD_AAdoGOk%c3^P/7]isW.9e@$#\qD&OVlH?#JW=Cr.Y3)]FmtO13m*gR%JA!Pj0lq@IC"9450>68!+J*he"aOl2iF-_n,'=8_n1p5MGIuE+YZP%2:]BTOG!d5nRDUTX,*iQ;c1n8[,b#5L%m0U8M!;H;iNB>fb+<7ic5Sc'q*#l:`P3Mq`5L+d5_W>knK>C^;Ch2"F*GSQ/J)TC(M*4%WO5`T'.9<7O6V#Gl6Wk6hk`7iK%#\Cm(.*,N;IQ2#r$o$bfs\e2@3"s%7pM2lXnA1&7fi@Z.0+^F)4HJ9<kb6TLfm;->c-Y"3a^+%dQlE&@\;+"%^bUjFF/ZiZO6?@YRVtfH>-H(X6I'A-EFb%K45Z5;k2P98VQT0r]iMGA=.g\gcb9A`d,f@L.j88,Y$2ZN57`WD>Q+u%PX"b6D1Tg2b+DQ0!9Z/PZF"Ba_cMn#Bm78)&./J1/-#Qg`8gJPmqk=Fq"q?t7,K%Q]o@?pCct*RJq#tE=n3Nsn[MrJCkTqK]o$tu%A+9fXo_6,&V*DZ5RN(h2f,.qN+tE@6Xp&=QEf&oLj$g*l`qCL8!b"+([U&ir=k$faQBjeB:)6(pB0qgJ/R571fG/Z)>oK0fPAq@M%4]>sPWZh@(IDC@#jsc"?.m,+qP^]6tLLKWH2F=m@le.TC^dZQ2L`DO#&ukMtGuH2V^;CDI^Q"G/cgnm1ifg=,:AT-%`$6`:#+;_^%.-<;+@7*ac!&9Jd[iG[KB<O]J:tFlnI4VOf7f(MX`hm"!JuGDS-qhLn%fM84X-u:.7U2Ul8J4'?B=G5uC8i]\ON*Z5J+iX;'KT1R%eWTM$W;[r&_f*@ehV0a;,!7C3YX<3AI%F:"Pb2Of1p_WH)s3a,o:"40!"5WnA1:<C!_AlQ7:OBW1#Vo_e`&:EFuoP=hRtQ3>acQD%$a2MBnUb+;GVK1dk`Pi*#98Ls0HN90anI(ll:be?Z8]!n$'8]??CPo%ajQB%/YZ%ZR\Fl>2HNR`cDQ5dG_o^uR`:)UVM!Z([dZ)&%I^sqG/00S^+[-ggU5Js?]"*K-"QXtG<Aaq0`D?#AU(QV,U(E^anU8dSLr7DM&eR8HdHaUG&Xs)U'KrIo%56J!pg`Ip5aFjJYcI:d%5juF9qbHRC1a*a:HaOi2*J$PTkX;^j-F(RDoCn$%)".\qk2q"C<k>:#<W4eO.`;C.<ai"LISWg;'I@3Ii/_]K6<t99a?l@Z7aXh!%N]RWE2,t-Q;\9NjKQ3/A"8jXS:b6,AUQpqG4G_C*:)=lYZU>ut-?pa"81J@L-TU2e8rg+4CEc>!Jk.#S,=Lj`"Qt_&P#P,(r>fNL%Ml5q/p\hdf1H:uVi>VBp/eh89cI?d2HDT<b*`(R+fKj]8kOXUL-N'kS!N7opGC,#g]Np0I^.6LbJa'X"C\rc.3&^")ltG?NL:?'t%d'pC*'ieE3m:56?j_A]2Q#fk)9D2/2L(;6#BKf]jC[-hhUpGM"A])Atf>WZMGC'Y2A`re8MZ8F:\\$!VE#B'2g>,Qg"3[NBnh]gt%rAR-(B)0d8FZcG0c<JKq?/:<1ogJ1n*d.`#7)9gEC@+N/BW7GQ8*2ca:\n]"/b+3`2t^^@/XdJr\L4!n'B/:WnW308]FQ3`"b@<Z%^b5?.i`'n2#4"kA>3=R(7oGj'!oFJVEh7eqOL@7Mi%5(,C,R1S9\hrX1(GJ-pRcRP7W6G?&!!ERXokWD@N+a\NPbQU<(M3p`H/QJ%\669;]\qW*O00LQ5q2VP<d^RgQJ*@ZRq>p0%ir6(2+*&>g(NL^Hsd>2n/+S&mXN7Qr:VfCjgTa7[s[kPrpIPtDuRBF^\t3_r:g6O%^\c@Wq*4das/=QLm=4ogs5Q??ScAQ@^\HF\mf33Gs75XNT@_J_pbN,"mr9qnrmLhKH]nDr^AYtLbEr8-l[Sqqf:2fd\+]2rJ,<UP%fC\IfoDO16TD5$HgSX`r4G2PknGTJb,+/E-O8T%X_=-<Os3q#:^DWSi."D;s6q.ti*2F0'\qF6p\`Qi3OOj_N4$a?J1'Mo7l8?t,%A-3<\2B_Z[AD1PsUEJ,%hC&05_9G-hE@=p/-#a-6;3*ZtM5D+^JFgT(g$,^G80pf/N?[428e_inYLB9a,\=`MV0$f^As!lbnV<a.%=TO!orn0"pXW-Iu%/<5MlK2&L+6:IkL8c]1#>k50?KC0`="W.[^hFo#S!>3AmKWQI_!J&JH_[hWJk-_,4a)&c>%7%U8G?b%pa&Io%dWSpp`&/QH)$p=S_,&GX:dVsj=C8rWDQ4-!hX!FT=Q#]s73r6c%_#"P!jD]!!lBq+OuImmd!#d\P&V5B[H5IuWC;'36Q%=>[ZC:^%i;=4^o_KNCFGNmC4&mh,PeGApcFfNVA:#7m0o#8(+/0BR5oD"s%iH?S:a)kS*/Wm0/5jUt*g\oA